Requests
========

Request
-------

A single kind of update to apply to a presentation.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "createSlide": {
    object (`[CreateSlideRequest](/slides/api/reference/rest/v1/presentations/request#CreateSlideRequest)`)
  },
  "createShape": {
    object (`[CreateShapeRequest](/slides/api/reference/rest/v1/presentations/request#CreateShapeRequest)`)
  },
  "createTable": {
    object (`[CreateTableRequest](/slides/api/reference/rest/v1/presentations/request#CreateTableRequest)`)
  },
  "insertText": {
    object (`[InsertTextRequest](/slides/api/reference/rest/v1/presentations/request#InsertTextRequest)`)
  },
  "insertTableRows": {
    object (`[InsertTableRowsRequest](/slides/api/reference/rest/v1/presentations/request#InsertTableRowsRequest)`)
  },
  "insertTableColumns": {
    object (`[InsertTableColumnsRequest](/slides/api/reference/rest/v1/presentations/request#InsertTableColumnsRequest)`)
  },
  "deleteTableRow": {
    object (`[DeleteTableRowRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTableRowRequest)`)
  },
  "deleteTableColumn": {
    object (`[DeleteTableColumnRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTableColumnRequest)`)
  },
  "replaceAllText": {
    object (`[ReplaceAllTextRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllTextRequest)`)
  },
  "deleteObject": {
    object (`[DeleteObjectRequest](/slides/api/reference/rest/v1/presentations/request#DeleteObjectRequest)`)
  },
  "updatePageElementTransform": {
    object (`[UpdatePageElementTransformRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementTransformRequest)`)
  },
  "updateSlidesPosition": {
    object (`[UpdateSlidesPositionRequest](/slides/api/reference/rest/v1/presentations/request#UpdateSlidesPositionRequest)`)
  },
  "deleteText": {
    object (`[DeleteTextRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTextRequest)`)
  },
  "createImage": {
    object (`[CreateImageRequest](/slides/api/reference/rest/v1/presentations/request#CreateImageRequest)`)
  },
  "createVideo": {
    object (`[CreateVideoRequest](/slides/api/reference/rest/v1/presentations/request#CreateVideoRequest)`)
  },
  "createSheetsChart": {
    object (`[CreateSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#CreateSheetsChartRequest)`)
  },
  "createLine": {
    object (`[CreateLineRequest](/slides/api/reference/rest/v1/presentations/request#CreateLineRequest)`)
  },
  "refreshSheetsChart": {
    object (`[RefreshSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#RefreshSheetsChartRequest)`)
  },
  "updateShapeProperties": {
    object (`[UpdateShapePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateShapePropertiesRequest)`)
  },
  "updateImageProperties": {
    object (`[UpdateImagePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateImagePropertiesRequest)`)
  },
  "updateVideoProperties": {
    object (`[UpdateVideoPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateVideoPropertiesRequest)`)
  },
  "updatePageProperties": {
    object (`[UpdatePagePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePagePropertiesRequest)`)
  },
  "updateTableCellProperties": {
    object (`[UpdateTableCellPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableCellPropertiesRequest)`)
  },
  "updateLineProperties": {
    object (`[UpdateLinePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateLinePropertiesRequest)`)
  },
  "createParagraphBullets": {
    object (`[CreateParagraphBulletsRequest](/slides/api/reference/rest/v1/presentations/request#CreateParagraphBulletsRequest)`)
  },
  "replaceAllShapesWithImage": {
    object (`[ReplaceAllShapesWithImageRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllShapesWithImageRequest)`)
  },
  "duplicateObject": {
    object (`[DuplicateObjectRequest](/slides/api/reference/rest/v1/presentations/request#DuplicateObjectRequest)`)
  },
  "updateTextStyle": {
    object (`[UpdateTextStyleRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTextStyleRequest)`)
  },
  "replaceAllShapesWithSheetsChart": {
    object (`[ReplaceAllShapesWithSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllShapesWithSheetsChartRequest)`)
  },
  "deleteParagraphBullets": {
    object (`[DeleteParagraphBulletsRequest](/slides/api/reference/rest/v1/presentations/request#DeleteParagraphBulletsRequest)`)
  },
  "updateParagraphStyle": {
    object (`[UpdateParagraphStyleRequest](/slides/api/reference/rest/v1/presentations/request#UpdateParagraphStyleRequest)`)
  },
  "updateTableBorderProperties": {
    object (`[UpdateTableBorderPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableBorderPropertiesRequest)`)
  },
  "updateTableColumnProperties": {
    object (`[UpdateTableColumnPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableColumnPropertiesRequest)`)
  },
  "updateTableRowProperties": {
    object (`[UpdateTableRowPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableRowPropertiesRequest)`)
  },
  "mergeTableCells": {
    object (`[MergeTableCellsRequest](/slides/api/reference/rest/v1/presentations/request#MergeTableCellsRequest)`)
  },
  "unmergeTableCells": {
    object (`[UnmergeTableCellsRequest](/slides/api/reference/rest/v1/presentations/request#UnmergeTableCellsRequest)`)
  },
  "groupObjects": {
    object (`[GroupObjectsRequest](/slides/api/reference/rest/v1/presentations/request#GroupObjectsRequest)`)
  },
  "ungroupObjects": {
    object (`[UngroupObjectsRequest](/slides/api/reference/rest/v1/presentations/request#UngroupObjectsRequest)`)
  },
  "updatePageElementAltText": {
    object (`[UpdatePageElementAltTextRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementAltTextRequest)`)
  },
  "replaceImage": {
    object (`[ReplaceImageRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceImageRequest)`)
  },
  "updateSlideProperties": {
    object (`[UpdateSlidePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateSlidePropertiesRequest)`)
  },
  "updatePageElementsZOrder": {
    object (`[UpdatePageElementsZOrderRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementsZOrderRequest)`)
  },
  "updateLineCategory": {
    object (`[UpdateLineCategoryRequest](/slides/api/reference/rest/v1/presentations/request#UpdateLineCategoryRequest)`)
  },
  "rerouteLine": {
    object (`[RerouteLineRequest](/slides/api/reference/rest/v1/presentations/request#RerouteLineRequest)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of update. Exactly one field is required. `kind` can be only one of the following:

`createSlide`

``object (`[CreateSlideRequest](/slides/api/reference/rest/v1/presentations/request#CreateSlideRequest)`)``

Creates a new slide.

`createShape`

``object (`[CreateShapeRequest](/slides/api/reference/rest/v1/presentations/request#CreateShapeRequest)`)``

Creates a new shape.

`createTable`

``object (`[CreateTableRequest](/slides/api/reference/rest/v1/presentations/request#CreateTableRequest)`)``

Creates a new table.

`insertText`

``object (`[InsertTextRequest](/slides/api/reference/rest/v1/presentations/request#InsertTextRequest)`)``

Inserts text into a shape or table cell.

`insertTableRows`

``object (`[InsertTableRowsRequest](/slides/api/reference/rest/v1/presentations/request#InsertTableRowsRequest)`)``

Inserts rows into a table.

`insertTableColumns`

``object (`[InsertTableColumnsRequest](/slides/api/reference/rest/v1/presentations/request#InsertTableColumnsRequest)`)``

Inserts columns into a table.

`deleteTableRow`

``object (`[DeleteTableRowRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTableRowRequest)`)``

Deletes a row from a table.

`deleteTableColumn`

``object (`[DeleteTableColumnRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTableColumnRequest)`)``

Deletes a column from a table.

`replaceAllText`

``object (`[ReplaceAllTextRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllTextRequest)`)``

Replaces all instances of specified text.

`deleteObject`

``object (`[DeleteObjectRequest](/slides/api/reference/rest/v1/presentations/request#DeleteObjectRequest)`)``

Deletes a page or page element from the presentation.

`updatePageElementTransform`

``object (`[UpdatePageElementTransformRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementTransformRequest)`)``

Updates the transform of a page element.

`updateSlidesPosition`

``object (`[UpdateSlidesPositionRequest](/slides/api/reference/rest/v1/presentations/request#UpdateSlidesPositionRequest)`)``

Updates the position of a set of slides in the presentation.

`deleteText`

``object (`[DeleteTextRequest](/slides/api/reference/rest/v1/presentations/request#DeleteTextRequest)`)``

Deletes text from a shape or a table cell.

`createImage`

``object (`[CreateImageRequest](/slides/api/reference/rest/v1/presentations/request#CreateImageRequest)`)``

Creates an image.

`createVideo`

``object (`[CreateVideoRequest](/slides/api/reference/rest/v1/presentations/request#CreateVideoRequest)`)``

Creates a video.

`createSheetsChart`

``object (`[CreateSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#CreateSheetsChartRequest)`)``

Creates an embedded Google Sheets chart.

`createLine`

``object (`[CreateLineRequest](/slides/api/reference/rest/v1/presentations/request#CreateLineRequest)`)``

Creates a line.

`refreshSheetsChart`

``object (`[RefreshSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#RefreshSheetsChartRequest)`)``

Refreshes a Google Sheets chart.

`updateShapeProperties`

``object (`[UpdateShapePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateShapePropertiesRequest)`)``

Updates the properties of a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`.

`updateImageProperties`

``object (`[UpdateImagePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateImagePropertiesRequest)`)``

Updates the properties of an `[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`.

`updateVideoProperties`

``object (`[UpdateVideoPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateVideoPropertiesRequest)`)``

Updates the properties of a `[Video](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`.

`updatePageProperties`

``object (`[UpdatePagePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePagePropertiesRequest)`)``

Updates the properties of a `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)`.

`updateTableCellProperties`

``object (`[UpdateTableCellPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableCellPropertiesRequest)`)``

Updates the properties of a `[TableCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell)`.

`updateLineProperties`

``object (`[UpdateLinePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateLinePropertiesRequest)`)``

Updates the properties of a `[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

`createParagraphBullets`

``object (`[CreateParagraphBulletsRequest](/slides/api/reference/rest/v1/presentations/request#CreateParagraphBulletsRequest)`)``

Creates bullets for paragraphs.

`replaceAllShapesWithImage`

``object (`[ReplaceAllShapesWithImageRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllShapesWithImageRequest)`)``

Replaces all shapes matching some criteria with an image.

`duplicateObject`

``object (`[DuplicateObjectRequest](/slides/api/reference/rest/v1/presentations/request#DuplicateObjectRequest)`)``

Duplicates a slide or page element.

`updateTextStyle`

``object (`[UpdateTextStyleRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTextStyleRequest)`)``

Updates the styling of text within a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)` or `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

`replaceAllShapesWithSheetsChart`

``object (`[ReplaceAllShapesWithSheetsChartRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceAllShapesWithSheetsChartRequest)`)``

Replaces all shapes matching some criteria with a Google Sheets chart.

`deleteParagraphBullets`

``object (`[DeleteParagraphBulletsRequest](/slides/api/reference/rest/v1/presentations/request#DeleteParagraphBulletsRequest)`)``

Deletes bullets from paragraphs.

`updateParagraphStyle`

``object (`[UpdateParagraphStyleRequest](/slides/api/reference/rest/v1/presentations/request#UpdateParagraphStyleRequest)`)``

Updates the styling of paragraphs within a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)` or `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

`updateTableBorderProperties`

``object (`[UpdateTableBorderPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableBorderPropertiesRequest)`)``

Updates the properties of the table borders in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

`updateTableColumnProperties`

``object (`[UpdateTableColumnPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableColumnPropertiesRequest)`)``

Updates the properties of a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` column.

`updateTableRowProperties`

``object (`[UpdateTableRowPropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateTableRowPropertiesRequest)`)``

Updates the properties of a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` row.

`mergeTableCells`

``object (`[MergeTableCellsRequest](/slides/api/reference/rest/v1/presentations/request#MergeTableCellsRequest)`)``

Merges cells in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

`unmergeTableCells`

``object (`[UnmergeTableCellsRequest](/slides/api/reference/rest/v1/presentations/request#UnmergeTableCellsRequest)`)``

Unmerges cells in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

`groupObjects`

``object (`[GroupObjectsRequest](/slides/api/reference/rest/v1/presentations/request#GroupObjectsRequest)`)``

Groups objects, such as page elements.

`ungroupObjects`

``object (`[UngroupObjectsRequest](/slides/api/reference/rest/v1/presentations/request#UngroupObjectsRequest)`)``

Ungroups objects, such as `[groups](/slides/api/reference/rest/v1/presentations.pages#Page.Group)`.

`updatePageElementAltText`

``object (`[UpdatePageElementAltTextRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementAltTextRequest)`)``

Updates the alt text title and/or description of a `[page element](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`.

`replaceImage`

``object (`[ReplaceImageRequest](/slides/api/reference/rest/v1/presentations/request#ReplaceImageRequest)`)``

Replaces an existing image with a new image.

`updateSlideProperties`

``object (`[UpdateSlidePropertiesRequest](/slides/api/reference/rest/v1/presentations/request#UpdateSlidePropertiesRequest)`)``

Updates the properties of a Slide

`updatePageElementsZOrder`

``object (`[UpdatePageElementsZOrderRequest](/slides/api/reference/rest/v1/presentations/request#UpdatePageElementsZOrderRequest)`)``

Updates the Z-order of `[page elements](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`.

`updateLineCategory`

``object (`[UpdateLineCategoryRequest](/slides/api/reference/rest/v1/presentations/request#UpdateLineCategoryRequest)`)``

Updates the category of a `[line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

`rerouteLine`

``object (`[RerouteLineRequest](/slides/api/reference/rest/v1/presentations/request#RerouteLineRequest)`)``

Reroutes a `[line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)` such that it's connected at the two closest connection sites on the connected page elements.

CreateSlideRequest
------------------

Creates a slide.

JSON representation

{
  "objectId": string,
  "insertionIndex": integer,
  "slideLayoutReference": {
    object (`[LayoutReference](/slides/api/reference/rest/v1/presentations/request#LayoutReference)`)
  },
  "placeholderIdMappings": \[
    {
      object (`[LayoutPlaceholderIdMapping](/slides/api/reference/rest/v1/presentations/request#LayoutPlaceholderIdMapping)`)
    }
  \]
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive.

If you don't specify an ID, a unique one is generated.

`insertionIndex`

`integer`

The optional zero-based index indicating where to insert the slides.

If you don't specify an index, the slide is created at the end.

`slideLayoutReference`

``object (`[LayoutReference](/slides/api/reference/rest/v1/presentations/request#LayoutReference)`)``

Layout reference of the slide to be inserted, based on the _current master_, which is one of the following:

*   The master of the previous slide index.
*   The master of the first slide, if the insertionIndex is zero.
*   The first master in the presentation, if there are no slides.

If the LayoutReference is not found in the current master, a 400 bad request error is returned.

If you don't specify a layout reference, the slide uses the predefined `BLANK` layout.

`placeholderIdMappings[]`

``object (`[LayoutPlaceholderIdMapping](/slides/api/reference/rest/v1/presentations/request#LayoutPlaceholderIdMapping)`)``

An optional list of object ID mappings from the `[placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)` (s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slideLayoutReference` is specified.

LayoutReference
---------------

Slide layout reference. This may reference either:

*   A predefined layout
*   One of the layouts in the presentation.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "predefinedLayout": enum (`[PredefinedLayout](/slides/api/reference/rest/v1/presentations/request#PredefinedLayout)`),
  "layoutId": string
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of LayoutReference. `kind` can be only one of the following:

`predefinedLayout`

``enum (`[PredefinedLayout](/slides/api/reference/rest/v1/presentations/request#PredefinedLayout)`)``

Predefined layout.

`layoutId`

`string`

Layout ID: the object ID of one of the layouts in the presentation.

PredefinedLayout
----------------

Predefined layout types. These are commonly found layouts in presentations. However, there is no guarantee that these layouts are present in the current master as they could have been deleted or not part of the used theme. Additionally, the placeholders on each layout may have been changed.

 

Enums

`PREDEFINED_LAYOUT_UNSPECIFIED`

Unspecified layout.

`BLANK`

Blank layout, with no placeholders.

`CAPTION_ONLY`

Layout with a caption at the bottom.

`TITLE`

Layout with a title and a subtitle.

`TITLE_AND_BODY`

Layout with a title and body.

`TITLE_AND_TWO_COLUMNS`

Layout with a title and two columns.

`TITLE_ONLY`

Layout with only a title.

`SECTION_HEADER`

Layout with a section title.

`SECTION_TITLE_AND_DESCRIPTION`

Layout with a title and subtitle on one side and description on the other.

`ONE_COLUMN_TEXT`

Layout with one title and one body, arranged in a single column.

`MAIN_POINT`

Layout with a main point.

`BIG_NUMBER`

Layout with a big number heading.

LayoutPlaceholderIdMapping
--------------------------

The user-specified ID mapping for a placeholder that will be created on a slide from a specified layout.

JSON representation

{
  "objectId": string,

  // Union field `kind` can be only one of the following:
  "layoutPlaceholder": {
    object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)
  },
  "layoutPlaceholderObjectId": string
  // End of list of possible types for union field `kind`.
}

 

Fields

`objectId`

`string`

A user-supplied object ID for the placeholder identified above that to be created onto a slide.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

Union field `kind`. The kind to identify a placeholder on a layout. `kind` can be only one of the following:

`layoutPlaceholder`

``object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)``

The placeholder on a layout that will be applied to a slide. Only `[type](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder.FIELDS.type)` and `[index](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder.FIELDS.index)` are needed. For example, a predefined `TITLE_AND_BODY` layout may usually have a TITLE placeholder with index 0 and a BODY placeholder with index 0.

`layoutPlaceholderObjectId`

`string`

The object ID of the placeholder on a layout that will be applied to a slide.

CreateShapeRequest
------------------

Creates a new shape.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },
  "shapeType": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Type)`)
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If empty, a unique identifier will be generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the shape.

`shapeType`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Type)`)``

The shape type.

PageElementProperties
---------------------

Common properties for a page element.

Note: When you initially create a `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.

JSON representation

{
  "pageObjectId": string,
  "size": {
    object (`[Size](/slides/api/reference/rest/v1/Size)`)
  },
  "transform": {
    object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)
  }
}

 

Fields

`pageObjectId`

`string`

The object ID of the page where the element is located.

`size`

``object (`[Size](/slides/api/reference/rest/v1/Size)`)``

The size of the element.

`transform`

``object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)``

The transform for the element.

CreateTableRequest
------------------

Creates a new table.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },
  "rows": integer,
  "columns": integer
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the table.

The table will be created at the provided size, subject to a minimum size. If no size is provided, the table will be automatically sized.

Table transforms must have a scale of 1 and no shear components. If no transform is provided, the table will be centered on the page.

`rows`

`integer`

Number of rows in the table.

`columns`

`integer`

Number of columns in the table.

InsertTextRequest
-----------------

Inserts text into a shape or a table cell.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "text": string,
  "insertionIndex": integer
}

 

Fields

`objectId`

`string`

The object ID of the shape or table where the text will be inserted.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The optional table cell location if the text is to be inserted into a table cell. If present, the objectId must refer to a table.

`text`

`string`

The text to be inserted.

Inserting a newline character will implicitly create a new `[ParagraphMarker](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphMarker)` at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets.

Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the `[TextRun](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextRun)` that exists at the insertion index.

Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.

`insertionIndex`

`integer`

The index where the text will be inserted, in Unicode code units, based on `[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)` indexes.

The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.

InsertTableRowsRequest
----------------------

Inserts rows into a table.

JSON representation

{
  "tableObjectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "insertBelow": boolean,
  "number": integer
}

 

Fields

`tableObjectId`

`string`

The table to insert rows into.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The reference table cell location from which rows will be inserted.

A new row will be inserted above (or below) the row where the reference cell is. If the reference cell is a merged cell, a new row will be inserted above (or below) the merged cell.

`insertBelow`

`boolean`

Whether to insert new rows below the reference cell location.

*   `True` : insert below the cell.
*   `False` : insert above the cell.

`number`

`integer`

The number of rows to be inserted. Maximum 20 per request.

InsertTableColumnsRequest
-------------------------

Inserts columns into a table.

Other columns in the table will be resized to fit the new column.

JSON representation

{
  "tableObjectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "insertRight": boolean,
  "number": integer
}

 

Fields

`tableObjectId`

`string`

The table to insert columns into.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The reference table cell location from which columns will be inserted.

A new column will be inserted to the left (or right) of the column where the reference cell is. If the reference cell is a merged cell, a new column will be inserted to the left (or right) of the merged cell.

`insertRight`

`boolean`

Whether to insert new columns to the right of the reference cell location.

*   `True` : insert to the right.
*   `False` : insert to the left.

`number`

`integer`

The number of columns to be inserted. Maximum 20 per request.

DeleteTableRowRequest
---------------------

Deletes a row from a table.

JSON representation

{
  "tableObjectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  }
}

 

Fields

`tableObjectId`

`string`

The table to delete rows from.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The reference table cell location from which a row will be deleted.

The row this cell spans will be deleted. If this is a merged cell, multiple rows will be deleted. If no rows remain in the table after this deletion, the whole table is deleted.

DeleteTableColumnRequest
------------------------

Deletes a column from a table.

JSON representation

{
  "tableObjectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  }
}

 

Fields

`tableObjectId`

`string`

The table to delete columns from.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The reference table cell location from which a column will be deleted.

The column this cell spans will be deleted. If this is a merged cell, multiple columns will be deleted. If no columns remain in the table after this deletion, the whole table is deleted.

ReplaceAllTextRequest
---------------------

Replaces all instances of text matching a criteria with `[replace text](/slides/api/reference/rest/v1/presentations/request#ReplaceAllTextRequest.FIELDS.replace_text)`.

JSON representation

{
  "replaceText": string,
  "pageObjectIds": \[
    string
  \],

  // Union field `criteria` can be only one of the following:
  "containsText": {
    object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)
  }
  // End of list of possible types for union field `criteria`.
}

 

Fields

`replaceText`

`string`

The text that will replace the matched text.

`pageObjectIds[]`

`string`

If non-empty, limits the matches to page elements only on the given pages.

Returns a 400 bad request error if given the page object ID of a `[notes master](/slides/api/reference/rest/v1/presentations#Presentation.FIELDS.notes_master)`, or if a page with that object ID doesn't exist in the presentation.

Union field `criteria`. The criteria used to match text to replace. `criteria` can be only one of the following:

`containsText`

``object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)``

Finds text in a shape matching this substring.

SubstringMatchCriteria
----------------------

A criteria that matches a specific string of text in a shape or table.

JSON representation

{
  "text": string,
  "matchCase": boolean
}

 

Fields

`text`

`string`

The text to search for in the shape or table.

`matchCase`

`boolean`

Indicates whether the search should respect case:

*   `True` : the search is case sensitive.
*   `False` : the search is case insensitive.

DeleteObjectRequest
-------------------

Deletes an object, either `[pages](/slides/api/reference/rest/v1/presentations.pages#Page)` or `[page elements](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`, from the presentation.

JSON representation

{
  "objectId": string
}

 

Fields

`objectId`

`string`

The object ID of the page or page element to delete.

If after a delete operation a `[group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` contains only 1 or no page elements, the group is also deleted.

If a placeholder is deleted on a layout, any empty inheriting placeholders are also deleted.

UpdatePageElementTransformRequest
---------------------------------

Updates the transform of a page element.

Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for `[PageElement.transform](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement.FIELDS.transform)` for more details.

JSON representation

{
  "objectId": string,
  "transform": {
    object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)
  },
  "applyMode": enum (`[ApplyMode](/slides/api/reference/rest/v1/presentations/request#ApplyMode)`)
}

 

Fields

`objectId`

`string`

The object ID of the page element to update.

`transform`

``object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)``

The input transform matrix used to update the page element.

`applyMode`

``enum (`[ApplyMode](/slides/api/reference/rest/v1/presentations/request#ApplyMode)`)``

The apply mode of the transform update.

ApplyMode
---------

The apply modes of the transform update.

 

Enums

`APPLY_MODE_UNSPECIFIED`

Unspecified mode.

`RELATIVE`

Applies the new AffineTransform matrix to the existing one, and replaces the existing one with the resulting concatenation.

`ABSOLUTE`

Replaces the existing AffineTransform matrix with the new one.

UpdateSlidesPositionRequest
---------------------------

Updates the position of slides in the presentation.

JSON representation

{
  "slideObjectIds": \[
    string
  \],
  "insertionIndex": integer
}

 

Fields

`slideObjectIds[]`

`string`

The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.

`insertionIndex`

`integer`

The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.

DeleteTextRequest
-----------------

Deletes text from a shape or a table cell.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "textRange": {
    object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)
  }
}

 

Fields

`objectId`

`string`

The object ID of the shape or table from which the text will be deleted.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The optional table cell location if the text is to be deleted from a table cell. If present, the objectId must refer to a table.

`textRange`

``object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)``

The range of text to delete, based on `[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)` indexes.

There is always an implicit newline character at the end of a shape's or table cell's text that cannot be deleted. `Range.Type.ALL` will use the correct bounds, but care must be taken when specifying explicit bounds for range types `FROM_START_INDEX` and `FIXED_RANGE`. For example, if the text is "ABC", followed by an implicit newline, then the maximum value is 2 for `textRange.start_index` and 3 for `textRange.end_index`.

Deleting text that crosses a paragraph boundary may result in changes to paragraph styles and lists as the two paragraphs are merged.

Ranges that include only one code unit of a surrogate pair are expanded to include both code units.

Range
-----

Specifies a contiguous range of an indexed collection, such as characters in text.

JSON representation

{
  "startIndex": integer,
  "endIndex": integer,
  "type": enum (`[Type](/slides/api/reference/rest/v1/presentations/request#Type)`)
}

 

Fields

`startIndex`

`integer`

The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.

`endIndex`

`integer`

The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.

`type`

``enum (`[Type](/slides/api/reference/rest/v1/presentations/request#Type)`)``

The type of range.

Type
----

The types of ranges.

 

Enums

`RANGE_TYPE_UNSPECIFIED`

Unspecified range type. This value must not be used.

`FIXED_RANGE`

A fixed range. Both the `startIndex` and `endIndex` must be specified.

`FROM_START_INDEX`

Starts the range at `startIndex` and continues until the end of the collection. The `endIndex` must not be specified.

`ALL`

Sets the range to be the whole length of the collection. Both the `startIndex` and the `endIndex` must not be specified.

CreateImageRequest
------------------

Creates an image.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },

  // Union field `image_source` can be only one of the following:
  "url": string
  // End of list of possible types for union field `image_source`.
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the image.

When the aspect ratio of the provided size does not match the image aspect ratio, the image is scaled and centered with respect to the size in order to maintain the aspect ratio. The provided transform is applied after this operation.

The `[PageElementProperties.size](/slides/api/reference/rest/v1/presentations/request#PageElementProperties.FIELDS.size)` property is optional. If you don't specify the size, the default size of the image is used.

The `[PageElementProperties.transform](/slides/api/reference/rest/v1/presentations/request#PageElementProperties.FIELDS.transform)` property is optional. If you don't specify a transform, the image will be placed at the top-left corner of the page.

Union field `image_source`. The kind of image source. `image_source` can be only one of the following:

`url`

`string`

The image URL.

The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50 MB in size, can't exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF formats.

The provided URL must be publicly accessible and up to 2 KB in length. The URL is saved with the image, and exposed through the `[Image.source_url](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image.FIELDS.source_url)` field.

CreateVideoRequest
------------------

Creates a video.

NOTE: Creating a video from Google Drive requires that the requesting app have at least one of the drive, drive.readonly, or drive.file OAuth scopes.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },
  "source": enum (`[Source](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Source)`),
  "id": string
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the video.

The `[PageElementProperties.size](/slides/api/reference/rest/v1/presentations/request#PageElementProperties.FIELDS.size)` property is optional. If you don't specify a size, a default size is chosen by the server.

The `[PageElementProperties.transform](/slides/api/reference/rest/v1/presentations/request#PageElementProperties.FIELDS.transform)` property is optional. The transform must not have shear components. If you don't specify a transform, the video will be placed at the top left corner of the page.

`source`

``enum (`[Source](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Source)`)``

The video source.

`id`

`string`

The video source's unique identifier for this video.

e.g. For YouTube video [https://www.youtube.com/watch?v=7U3axjORYZ0](https://www.youtube.com/watch?v=7U3axjORYZ0), the ID is 7U3axjORYZ0. For a Google Drive video [https://drive.google.com/file/d/1xCgQLFTJi5\_Xl8DgW\_lcUYq5e-q6Hi5Q](https://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q) the ID is 1xCgQLFTJi5\_Xl8DgW\_lcUYq5e-q6Hi5Q.

To access a Google Drive video file, you might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).

CreateSheetsChartRequest
------------------------

Creates an embedded Google Sheets chart.

NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },
  "spreadsheetId": string,
  "chartId": integer,
  "linkingMode": enum (`[LinkingMode](/slides/api/reference/rest/v1/presentations/request#LinkingMode)`)
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character \[a-zA-Z0-9\_\] and then followed by any number of the following characters \[a-zA-Z0-9\_-:\]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the chart.

When the aspect ratio of the provided size does not match the chart aspect ratio, the chart is scaled and centered with respect to the size in order to maintain aspect ratio. The provided transform is applied after this operation.

`spreadsheetId`

`string`

The ID of the Google Sheets spreadsheet that contains the chart.

You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).

`chartId`

`integer`

The ID of the specific chart in the Google Sheets spreadsheet.

`linkingMode`

``enum (`[LinkingMode](/slides/api/reference/rest/v1/presentations/request#LinkingMode)`)``

The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.

LinkingMode
-----------

The mode with which the chart is linked to the source spreadsheet.

 

Enums

`NOT_LINKED_IMAGE`

The chart is not associated with the source spreadsheet and cannot be updated. A chart that is not linked will be inserted as an image.

`LINKED`

Linking the chart allows it to be updated, and other collaborators will see a link to the spreadsheet.

CreateLineRequest
-----------------

Creates a line.

JSON representation

{
  "objectId": string,
  "elementProperties": {
    object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)
  },
  "lineCategory": enum (`[Category](/slides/api/reference/rest/v1/presentations/request#Category)`),
  "category": enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)
}

 

Fields

`objectId`

`string`

A user-supplied object ID.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

`elementProperties`

``object (`[PageElementProperties](/slides/api/reference/rest/v1/presentations/request#PageElementProperties)`)``

The element properties for the line.

`lineCategory   **(deprecated)**`

``enum (`[Category](/slides/api/reference/rest/v1/presentations/request#Category)`)``

This item is deprecated!

The category of the line to be created.

**Deprecated** : use `category` instead.

The exact `[line type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)` created is determined based on the category and how it's routed to connect to other page elements.

If you specify both a `category` and a `lineCategory`, the `category` takes precedence.

`category`

``enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)``

The category of the line to be created.

The exact `[line type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)` created is determined based on the category and how it's routed to connect to other page elements.

If you specify both a `category` and a `lineCategory`, the `category` takes precedence.

If you do not specify a value for `category`, but specify a value for `lineCategory`, then the specified `lineCategory` value is used.

If you do not specify either, then `[STRAIGHT](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)` is used.

Category
--------

This item is deprecated!

The line categories.

**This item is deprecated** . Use `[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)` instead.

 

Enums

`STRAIGHT`

Straight connectors, including straight connector 1. The is the default category when one is not specified.

`BENT`

Bent connectors, including bent connector 2 to 5.

`CURVED`

Curved connectors, including curved connector 2 to 5.

RefreshSheetsChartRequest
-------------------------

Refreshes an embedded Google Sheets chart by replacing it with the latest version of the chart from Google Sheets.

NOTE: Refreshing charts requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.

JSON representation

{
  "objectId": string
}

 

Fields

`objectId`

`string`

The object ID of the chart to refresh.

UpdateShapePropertiesRequest
----------------------------

Update the properties of a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`.

JSON representation

{
  "objectId": string,
  "shapeProperties": {
    object (`[ShapeProperties](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the shape the updates are applied to.

`shapeProperties`

``object (`[ShapeProperties](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeProperties)`)``

The shape properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `shapeProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the shape background solid fill color, set `fields` to `"shapeBackgroundFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdateImagePropertiesRequest
----------------------------

Update the properties of an `[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`.

JSON representation

{
  "objectId": string,
  "imageProperties": {
    object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the image the updates are applied to.

`imageProperties`

``object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)``

The image properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `imageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the image outline color, set `fields` to `"outline.outlineFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdateVideoPropertiesRequest
----------------------------

Update the properties of a `[Video](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`.

JSON representation

{
  "objectId": string,
  "videoProperties": {
    object (`[VideoProperties](/slides/api/reference/rest/v1/presentations.pages/videos#Page.VideoProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the video the updates are applied to.

`videoProperties`

``object (`[VideoProperties](/slides/api/reference/rest/v1/presentations.pages/videos#Page.VideoProperties)`)``

The video properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `videoProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the video outline color, set `fields` to `"outline.outlineFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdatePagePropertiesRequest
---------------------------

Updates the properties of a `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)`.

JSON representation

{
  "objectId": string,
  "pageProperties": {
    object (`[PageProperties](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the page the update is applied to.

`pageProperties`

``object (`[PageProperties](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties)`)``

The page properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `pageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the page background solid fill color, set `fields` to `"pageBackgroundFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdateTableCellPropertiesRequest
--------------------------------

Update the properties of a `[TableCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell)`.

JSON representation

{
  "objectId": string,
  "tableRange": {
    object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)
  },
  "tableCellProperties": {
    object (`[TableCellProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the table.

`tableRange`

``object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)``

The table range representing the subset of the table to which the updates are applied. If a table range is not specified, the updates will apply to the entire table.

`tableCellProperties`

``object (`[TableCellProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellProperties)`)``

The table cell properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `tableCellProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the table cell background solid fill color, set `fields` to `"tableCellBackgroundFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

TableRange
----------

A table range represents a reference to a subset of a table.

It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this:

 [   ][   ][   ]
     [   ][   ][   ]
     [             ]

A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells:

 [ x ][ x ][   ]
     [ x ][ x ][   ]
     [ x    x    x ]

JSON representation

{
  "location": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "rowSpan": integer,
  "columnSpan": integer
}

 

Fields

`location`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The starting location of the table range.

`rowSpan`

`integer`

The row span of the table range.

`columnSpan`

`integer`

The column span of the table range.

UpdateLinePropertiesRequest
---------------------------

Updates the properties of a `[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

JSON representation

{
  "objectId": string,
  "lineProperties": {
    object (`[LineProperties](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the line the update is applied to.

`lineProperties`

``object (`[LineProperties](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineProperties)`)``

The line properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `lineProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the line solid fill color, set `fields` to `"lineFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

CreateParagraphBulletsRequest
-----------------------------

Creates bullets for all of the paragraphs that overlap with the given text index range.

The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text.

If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "textRange": {
    object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)
  },
  "bulletPreset": enum (`[BulletGlyphPreset](/slides/api/reference/rest/v1/presentations/request#BulletGlyphPreset)`)
}

 

Fields

`objectId`

`string`

The object ID of the shape or table containing the text to add bullets to.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The optional table cell location if the text to be modified is in a table cell. If present, the objectId must refer to a table.

`textRange`

``object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)``

The range of text to apply the bullet presets to, based on `[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)` indexes.

`bulletPreset`

``enum (`[BulletGlyphPreset](/slides/api/reference/rest/v1/presentations/request#BulletGlyphPreset)`)``

The kinds of bullet glyphs to be used. Defaults to the `BULLET_DISC_CIRCLE_SQUARE` preset.

BulletGlyphPreset
-----------------

Preset patterns of bullet glyphs for lists in text.

These patterns use these kinds of bullets:

*   `ARROW` : An arrow, corresponding to a Unicode U+2794 code point
*   `ARROW3D` : An arrow with 3D shading, corresponding to a Unicode U+27a2 code point
*   `CHECKBOX` : A hollow square, corresponding to a Unicode U+274f code point
*   `CIRCLE` : A hollow circle, corresponding to a Unicode U+25cb code point
*   `DIAMOND` : A solid diamond, corresponding to a Unicode U+25c6 code point
*   `DIAMONDX` : A diamond with an 'x', corresponding to a Unicode U+2756 code point
*   `HOLLOWDIAMOND` : A hollow diamond, corresponding to a Unicode U+25c7 code point
*   `DISC` : A solid circle, corresponding to a Unicode U+25cf code point
*   `SQUARE` : A solid square, corresponding to a Unicode U+25a0 code point
*   `STAR` : A star, corresponding to a Unicode U+2605 code point
*   `ALPHA` : A lowercase letter, like 'a', 'b', or 'c'.
*   `UPPERALPHA` : An uppercase letter, like 'A', 'B', or 'C'.
*   `DIGIT` : A number, like '1', '2', or '3'.
*   `ZERODIGIT` : A number where single digit numbers are prefixed with a zero, like '01', '02', or '03'. Numbers with more than one digit are not prefixed a zero.
*   `ROMAN` : A lowercase roman numeral, like 'i', 'ii', or 'iii'.
*   `UPPERROMAN` : A uppercase roman numeral, like 'I', 'II', or 'III'.
*   `LEFTTRIANGLE` : A triangle pointing left, corresponding to a Unicode U+25c4 code point

 

Enums

`BULLET_DISC_CIRCLE_SQUARE`

A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`BULLET_DIAMONDX_ARROW3D_SQUARE`

A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`BULLET_CHECKBOX`

A bulleted list with `CHECKBOX` bullet glyphs for all list nesting levels.

`BULLET_ARROW_DIAMOND_DISC`

A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for the first 3 list nesting levels.

`BULLET_STAR_CIRCLE_SQUARE`

A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`BULLET_ARROW3D_CIRCLE_SQUARE`

A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`BULLET_LEFTTRIANGLE_DIAMOND_DISC`

A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet glyph for the first 3 list nesting levels.

`BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE`

A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`BULLET_DIAMOND_CIRCLE_SQUARE`

A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph for the first 3 list nesting levels.

`NUMBERED_DIGIT_ALPHA_ROMAN`

A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for the first 3 list nesting levels, followed by periods.

`NUMBERED_DIGIT_ALPHA_ROMAN_PARENS`

A numbered list with `DIGIT`, `ALPHA` and `ROMAN` numeric glyphs for the first 3 list nesting levels, followed by parenthesis.

`NUMBERED_DIGIT_NESTED`

A numbered list with `DIGIT` numeric glyphs separated by periods, where each nesting level uses the previous nesting level's glyph as a prefix. For example: '1.', '1.1.', '2.', '2.2.'.

`NUMBERED_UPPERALPHA_ALPHA_ROMAN`

A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs for the first 3 list nesting levels, followed by periods.

`NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT`

A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DIGIT` numeric glyphs for the first 3 list nesting levels, followed by periods.

`NUMBERED_ZERODIGIT_ALPHA_ROMAN`

A numbered list with `ZERODIGIT`, `ALPHA` and `ROMAN` numeric glyphs for the first 3 list nesting levels, followed by periods.

ReplaceAllShapesWithImageRequest
--------------------------------

Replaces all shapes that match the given criteria with the provided image.

The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.

JSON representation

{
  "replaceMethod": enum (`[ReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ReplaceMethod)`),
  "imageReplaceMethod": enum (`[ImageReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ImageReplaceMethod)`),
  "pageObjectIds": \[
    string
  \],

  // Union field `criteria` can be only one of the following:
  "containsText": {
    object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)
  }
  // End of list of possible types for union field `criteria`.

  // Union field `image_source` can be only one of the following:
  "imageUrl": string
  // End of list of possible types for union field `image_source`.
}

 

Fields

`replaceMethod   **(deprecated)**`

``enum (`[ReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ReplaceMethod)`)``

This item is deprecated!

The replace method.

**Deprecated** : use `imageReplaceMethod` instead.

If you specify both a `replaceMethod` and an `imageReplaceMethod`, the `imageReplaceMethod` takes precedence.

`imageReplaceMethod`

``enum (`[ImageReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ImageReplaceMethod)`)``

The image replace method.

If you specify both a `replaceMethod` and an `imageReplaceMethod`, the `imageReplaceMethod` takes precedence.

If you do not specify a value for `imageReplaceMethod`, but specify a value for `replaceMethod`, then the specified `replaceMethod` value is used.

If you do not specify either, then CENTER\_INSIDE is used.

`pageObjectIds[]`

`string`

If non-empty, limits the matches to page elements only on the given pages.

Returns a 400 bad request error if given the page object ID of a `[notes page](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties.FIELDS.notes_page)` or a `[notes master](/slides/api/reference/rest/v1/presentations#Presentation.FIELDS.notes_master)`, or if a page with that object ID doesn't exist in the presentation.

Union field `criteria`. The criteria that the shapes must match in order to be replaced. `criteria` can be only one of the following:

`containsText`

``object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)``

If set, this request will replace all of the shapes that contain the given text.

Union field `image_source`. The kind of image source. `image_source` can be only one of the following:

`imageUrl`

`string`

The image URL.

The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format.

The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the `[Image.source_url](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image.FIELDS.source_url)` field.

ReplaceMethod
-------------

This item is deprecated!

The replace method.

**This item is deprecated** . Use `[ImageReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ImageReplaceMethod)` instead.

 

Enums

`CENTER_INSIDE`

Scales and centers the image to fit within the bounds of the original shape and maintains the image's aspect ratio. The rendered size of the image may be smaller than the size of the shape. This is the default method when one is not specified.

`CENTER_CROP`

Scales and centers the image to fill the bounds of the original shape. The image may be cropped in order to fill the shape. The rendered size of the image will be the same as that of the original shape.

ImageReplaceMethod
------------------

The image replace method.

 

Enums

`IMAGE_REPLACE_METHOD_UNSPECIFIED`

Unspecified image replace method. This value must not be used.

`CENTER_INSIDE`

Scales and centers the image to fit within the bounds of the original shape and maintains the image's aspect ratio. The rendered size of the image may be smaller than the size of the shape. This is the default method when one is not specified.

`CENTER_CROP`

Scales and centers the image to fill the bounds of the original shape. The image may be cropped in order to fill the shape. The rendered size of the image will be the same as the original shape.

DuplicateObjectRequest
----------------------

Duplicates a slide or page element.

When duplicating a slide, the duplicate slide will be created immediately following the specified slide. When duplicating a page element, the duplicate will be placed on the same page at the same position as the original.

JSON representation

{
  "objectId": string,
  "objectIds": {
    string: string,
    ...
  }
}

 

Fields

`objectId`

`string`

The ID of the object to duplicate.

`objectIds`

`map (key: string, value: string)`

The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `objectId` field as a key and the newly desired ID as the value.

All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50.

If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.

UpdateTextStyleRequest
----------------------

Update the styling of text in a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)` or `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "style": {
    object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)
  },
  "textRange": {
    object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the shape or table with the text to be styled.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The location of the cell in the table containing the text to style. If `objectId` refers to a table, `cellLocation` must have a value. Otherwise, it must not.

`style`

``object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)``

The style(s) to set on the text.

If the value for a particular style matches that of the parent, that style will be set to inherit.

Certain text style changes may cause other changes meant to mirror the behavior of the Slides editor. See the documentation of `[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)` for more information.

`textRange`

``object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)``

The range of text to style.

The range may be extended to include adjacent newlines.

If the range fully contains a paragraph belonging to a list, the paragraph's bullet is also updated with the matching text style.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example, to update the text style to bold, set `fields` to `"bold"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

ReplaceAllShapesWithSheetsChartRequest
--------------------------------------

Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape.

NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.

JSON representation

{
  "containsText": {
    object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)
  },
  "spreadsheetId": string,
  "chartId": integer,
  "linkingMode": enum (`[LinkingMode](/slides/api/reference/rest/v1/presentations/request#LinkingMode_1)`),
  "pageObjectIds": \[
    string
  \]
}

 

Fields

`containsText`

``object (`[SubstringMatchCriteria](/slides/api/reference/rest/v1/presentations/request#SubstringMatchCriteria)`)``

The criteria that the shapes must match in order to be replaced. The request will replace all of the shapes that contain the given text.

`spreadsheetId`

`string`

The ID of the Google Sheets spreadsheet that contains the chart.

`chartId`

`integer`

The ID of the specific chart in the Google Sheets spreadsheet.

`linkingMode`

``enum (`[LinkingMode](/slides/api/reference/rest/v1/presentations/request#LinkingMode_1)`)``

The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.

`pageObjectIds[]`

`string`

If non-empty, limits the matches to page elements only on the given pages.

Returns a 400 bad request error if given the page object ID of a `[notes page](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties.FIELDS.notes_page)` or a `[notes master](/slides/api/reference/rest/v1/presentations#Presentation.FIELDS.notes_master)`, or if a page with that object ID doesn't exist in the presentation.

LinkingMode
-----------

The mode with which the chart is linked to the source spreadsheet.

 

Enums

`NOT_LINKED_IMAGE`

The chart is not associated with the source spreadsheet and cannot be updated. A chart that is not linked will be inserted as an image.

`LINKED`

Linking the chart allows it to be updated, and other collaborators will see a link to the spreadsheet.

DeleteParagraphBulletsRequest
-----------------------------

Deletes bullets from all of the paragraphs that overlap with the given text index `[range](/slides/api/reference/rest/v1/presentations/request#Range)`.

The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "textRange": {
    object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)
  }
}

 

Fields

`objectId`

`string`

The object ID of the shape or table containing the text to delete bullets from.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The optional table cell location if the text to be modified is in a table cell. If present, the objectId must refer to a table.

`textRange`

``object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)``

The range of text to delete bullets from, based on `[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)` indexes.

UpdateParagraphStyleRequest
---------------------------

Updates the styling for all of the paragraphs within a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)` or `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` that overlap with the given text index range.

JSON representation

{
  "objectId": string,
  "cellLocation": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "style": {
    object (`[ParagraphStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle)`)
  },
  "textRange": {
    object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the shape or table with the text to be styled.

`cellLocation`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The location of the cell in the table containing the paragraph(s) to style. If `objectId` refers to a table, `cellLocation` must have a value. Otherwise, it must not.

`style`

``object (`[ParagraphStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle)`)``

The paragraph's style.

`textRange`

``object (`[Range](/slides/api/reference/rest/v1/presentations/request#Range)`)``

The range of text containing the paragraph(s) to style.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example, to update the paragraph alignment, set `fields` to `"alignment"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdateTableBorderPropertiesRequest
----------------------------------

Updates the properties of the table borders in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

JSON representation

{
  "objectId": string,
  "tableRange": {
    object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)
  },
  "borderPosition": enum (`[BorderPosition](/slides/api/reference/rest/v1/presentations/request#BorderPosition)`),
  "tableBorderProperties": {
    object (`[TableBorderProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the table.

`tableRange`

``object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)``

The table range representing the subset of the table to which the updates are applied. If a table range is not specified, the updates will apply to the entire table.

`borderPosition`

``enum (`[BorderPosition](/slides/api/reference/rest/v1/presentations/request#BorderPosition)`)``

The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.

`tableBorderProperties`

``object (`[TableBorderProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderProperties)`)``

The table border properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the table border solid fill color, set `fields` to `"tableBorderFill.solidFill.color"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

BorderPosition
--------------

The table border position.

 

Enums

`ALL`

All borders in the range.

`BOTTOM`

Borders at the bottom of the range.

`INNER`

Borders on the inside of the range.

`INNER_HORIZONTAL`

Horizontal borders on the inside of the range.

`INNER_VERTICAL`

Vertical borders on the inside of the range.

`LEFT`

Borders at the left of the range.

`OUTER`

Borders along the outside of the range.

`RIGHT`

Borders at the right of the range.

`TOP`

Borders at the top of the range.

UpdateTableColumnPropertiesRequest
----------------------------------

Updates the properties of a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` column.

JSON representation

{
  "objectId": string,
  "columnIndices": \[
    integer
  \],
  "tableColumnProperties": {
    object (`[TableColumnProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableColumnProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the table.

`columnIndices[]`

`integer`

The list of zero-based indices specifying which columns to update. If no indices are provided, all columns in the table will be updated.

`tableColumnProperties`

``object (`[TableColumnProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableColumnProperties)`)``

The table column properties to update.

If the value of `tableColumnProperties#columnWidth` in the request is less than 406,400 EMU (32 points), a 400 bad request error is returned.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the column width, set `fields` to `"columnWidth"`.

If '"columnWidth"' is included in the field mask but the property is left unset, the column width will default to 406,400 EMU (32 points).

UpdateTableRowPropertiesRequest
-------------------------------

Updates the properties of a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` row.

JSON representation

{
  "objectId": string,
  "rowIndices": \[
    integer
  \],
  "tableRowProperties": {
    object (`[TableRowProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRowProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the table.

`rowIndices[]`

`integer`

The list of zero-based indices specifying which rows to update. If no indices are provided, all rows in the table will be updated.

`tableRowProperties`

``object (`[TableRowProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRowProperties)`)``

The table row properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root `tableRowProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update the minimum row height, set `fields` to `"minRowHeight"`.

If '"minRowHeight"' is included in the field mask but the property is left unset, the minimum row height will default to 0.

MergeTableCellsRequest
----------------------

Merges cells in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

JSON representation

{
  "objectId": string,
  "tableRange": {
    object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)
  }
}

 

Fields

`objectId`

`string`

The object ID of the table.

`tableRange`

``object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)``

The table range specifying which cells of the table to merge.

Any text in the cells being merged will be concatenated and stored in the upper-left ("head") cell of the range. If the range is non-rectangular (which can occur in some cases where the range covers cells that are already merged), a 400 bad request error is returned.

UnmergeTableCellsRequest
------------------------

Unmerges cells in a `[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`.

JSON representation

{
  "objectId": string,
  "tableRange": {
    object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)
  }
}

 

Fields

`objectId`

`string`

The object ID of the table.

`tableRange`

``object (`[TableRange](/slides/api/reference/rest/v1/presentations/request#TableRange)`)``

The table range specifying which cells of the table to unmerge.

All merged cells in this range will be unmerged, and cells that are already unmerged will not be affected. If the range has no merged cells, the request will do nothing. If there is text in any of the merged cells, the text will remain in the upper-left ("head") cell of the resulting block of unmerged cells.

GroupObjectsRequest
-------------------

Groups objects to create an object group. For example, groups `[PageElements](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` to create a `[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` on the same page as all the children.

JSON representation

{
  "groupObjectId": string,
  "childrenObjectIds": \[
    string
  \]
}

 

Fields

`groupObjectId`

`string`

A user-supplied object ID for the group to be created.

If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50.

If you don't specify an ID, a unique one is generated.

`childrenObjectIds[]`

`string`

The object IDs of the objects to group.

Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as `[videos](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`, `[tables](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)` and `[placeholders](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)` cannot be grouped.

UngroupObjectsRequest
---------------------

Ungroups objects, such as `[groups](/slides/api/reference/rest/v1/presentations.pages#Page.Group)`.

JSON representation

{
  "objectIds": \[
    string
  \]
}

 

Fields

`objectIds[]`

`string`

The object IDs of the objects to ungroup.

Only `[groups](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` that are not inside other `[groups](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` can be ungrouped. All the groups should be on the same page. The group itself is deleted. The visual sizes and positions of all the children are preserved.

UpdatePageElementAltTextRequest
-------------------------------

Updates the alt text title and/or description of a `[page element](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`.

JSON representation

{
  "objectId": string,
  "title": string,
  "description": string
}

 

Fields

`objectId`

`string`

The object ID of the page element the updates are applied to.

`title`

`string`

The updated alt text title of the page element. If unset the existing value will be maintained. The title is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.

`description`

`string`

The updated alt text description of the page element. If unset the existing value will be maintained. The description is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.

ReplaceImageRequest
-------------------

Replaces an existing image with a new image.

Replacing an image removes some `[image effects](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)` from the existing image.

JSON representation

{
  "imageObjectId": string,
  "imageReplaceMethod": enum (`[ImageReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ImageReplaceMethod)`),

  // Union field `image_source` can be only one of the following:
  "url": string
  // End of list of possible types for union field `image_source`.
}

 

Fields

`imageObjectId`

`string`

The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.

`imageReplaceMethod`

``enum (`[ImageReplaceMethod](/slides/api/reference/rest/v1/presentations/request#ImageReplaceMethod)`)``

The replacement method.

Union field `image_source`. The kind of image source. `image_source` can be only one of the following:

`url`

`string`

The image URL.

The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format.

The provided URL can't surpass 2 KB in length. The URL is saved with the image, and exposed through the `[Image.source_url](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image.FIELDS.source_url)` field.

UpdateSlidePropertiesRequest
----------------------------

Updates the properties of a Slide.

JSON representation

{
  "objectId": string,
  "slideProperties": {
    object (`[SlideProperties](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties)`)
  },
  "fields": string
}

 

Fields

`objectId`

`string`

The object ID of the slide the update is applied to.

`slideProperties`

``object (`[SlideProperties](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties)`)``

The slide properties to update.

`fields`

``string (`[FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask)` format)``

The fields that should be updated.

At least one field must be specified. The root 'slideProperties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.

For example to update whether a slide is skipped, set `fields` to `"isSkipped"`.

To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

UpdatePageElementsZOrderRequest
-------------------------------

Updates the Z-order of page elements. Z-order is an ordering of the elements on the page from back to front. The page element in the front may cover the elements that are behind it.

JSON representation

{
  "pageElementObjectIds": \[
    string
  \],
  "operation": enum (`[ZOrderOperation](/slides/api/reference/rest/v1/presentations/request#ZOrderOperation)`)
}

 

Fields

`pageElementObjectIds[]`

`string`

The object IDs of the page elements to update.

All the page elements must be on the same page and must not be grouped.

`operation`

``enum (`[ZOrderOperation](/slides/api/reference/rest/v1/presentations/request#ZOrderOperation)`)``

The Z-order operation to apply on the page elements.

When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.

ZOrderOperation
---------------

The operation to update a page element's Z-order.

 

Enums

`Z_ORDER_OPERATION_UNSPECIFIED`

Unspecified operation.

`BRING_TO_FRONT`

Brings the page elements to the front of the page.

`BRING_FORWARD`

Brings the page elements forward on the page by one element relative to the forwardmost one in the specified page elements.

`SEND_BACKWARD`

Sends the page elements backward on the page by one element relative to the furthest behind one in the specified page elements.

`SEND_TO_BACK`

Sends the page elements to the back of the page.

UpdateLineCategoryRequest
-------------------------

Updates the category of a `[line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

JSON representation

{
  "objectId": string,
  "lineCategory": enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)
}

 

Fields

`objectId`

`string`

The object ID of the line the update is applied to.

Only a line with a `[category](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line.FIELDS.line_category)` indicating it is a "connector" can be updated.

The line may be rerouted after updating its category.

`lineCategory`

``enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)``

The line category to update to.

The exact `[line type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)` is determined based on the category to update to and how it's routed to connect to other page elements.

RerouteLineRequest
------------------

Reroutes a `[line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)` such that it's connected at the two closest connection sites on the connected page elements.

JSON representation

{
  "objectId": string
}

 

Fields

`objectId`

`string`

The object ID of the line to reroute.

Only a line with a `[category](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line.FIELDS.line_category)` indicating it is a "connector" can be rerouted. The start and end connections of the line must be on different page elements.



REST Resource: presentations.pages
==================================

Resource: Page
--------------

A page in a presentation.

JSON representation

{
  "objectId": string,
  "pageType": enum (`[PageType](/slides/api/reference/rest/v1/presentations.pages#Page.PageType)`),
  "pageElements": \[
    {
      object (`[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`)
    }
  \],
  "revisionId": string,
  "pageProperties": {
    object (`[PageProperties](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties)`)
  },

  // Union field `properties` can be only one of the following:
  "slideProperties": {
    object (`[SlideProperties](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties)`)
  },
  "layoutProperties": {
    object (`[LayoutProperties](/slides/api/reference/rest/v1/presentations.pages#Page.LayoutProperties)`)
  },
  "notesProperties": {
    object (`[NotesProperties](/slides/api/reference/rest/v1/presentations.pages#Page.NotesProperties)`)
  },
  "masterProperties": {
    object (`[MasterProperties](/slides/api/reference/rest/v1/presentations.pages#Page.MasterProperties)`)
  }
  // End of list of possible types for union field `properties`.
}

 

Fields

`objectId`

`string`

The object ID for this page. Object IDs used by `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)` and `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` share the same namespace.

`pageType`

``enum (`[PageType](/slides/api/reference/rest/v1/presentations.pages#Page.PageType)`)``

The type of the page.

`pageElements[]`

``object (`[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`)``

The page elements rendered on the page.

`revisionId`

`string`

Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation.

The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

`pageProperties`

``object (`[PageProperties](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties)`)``

The properties of the page.

Union field `properties`. Properties that are specific for each page type. Masters do not require any additional properties. `properties` can be only one of the following:

`slideProperties`

``object (`[SlideProperties](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties)`)``

Slide specific properties. Only set if pageType = SLIDE.

`layoutProperties`

``object (`[LayoutProperties](/slides/api/reference/rest/v1/presentations.pages#Page.LayoutProperties)`)``

Layout specific properties. Only set if pageType = LAYOUT.

`notesProperties`

``object (`[NotesProperties](/slides/api/reference/rest/v1/presentations.pages#Page.NotesProperties)`)``

Notes specific properties. Only set if pageType = NOTES.

`masterProperties`

``object (`[MasterProperties](/slides/api/reference/rest/v1/presentations.pages#Page.MasterProperties)`)``

Master specific properties. Only set if pageType = MASTER.

### PageType

The type of a page.

 

Enums

`SLIDE`

A slide page.

`MASTER`

A master slide page.

`LAYOUT`

A layout page.

`NOTES`

A notes page.

`NOTES_MASTER`

A notes master page.

### PageElement

A visual element rendered on a page.

JSON representation

{
  "objectId": string,
  "size": {
    object (`[Size](/slides/api/reference/rest/v1/Size)`)
  },
  "transform": {
    object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)
  },
  "title": string,
  "description": string,

  // Union field `element_kind` can be only one of the following:
  "elementGroup": {
    object (`[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)`)
  },
  "shape": {
    object (`[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`)
  },
  "image": {
    object (`[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`)
  },
  "video": {
    object (`[Video](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`)
  },
  "line": {
    object (`[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`)
  },
  "table": {
    object (`[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`)
  },
  "wordArt": {
    object (`[WordArt](/slides/api/reference/rest/v1/presentations.pages#Page.WordArt)`)
  },
  "sheetsChart": {
    object (`[SheetsChart](/slides/api/reference/rest/v1/presentations.pages/charts#Page.SheetsChart)`)
  }
  // End of list of possible types for union field `element_kind`.
}

 

Fields

`objectId`

`string`

The object ID for this page element. Object IDs used by `[google.apps.slides.v1.Page](/slides/api/reference/rest/v1/presentations.pages#Page)` and `[google.apps.slides.v1.PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` share the same namespace.

`size`

``object (`[Size](/slides/api/reference/rest/v1/Size)`)``

The size of the page element.

`transform`

``object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)``

The transform of the page element.

The visual appearance of the page element is determined by its absolute transform. To compute the absolute transform, preconcatenate a page element's transform with the transforms of all of its parent groups. If the page element is not in a group, its absolute transform is the same as the value in this field.

The initial transform for the newly created `[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` is always the identity transform.

`title`

`string`

The title of the page element. Combined with description to display alt text.

The field is not supported for `[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` elements.

`description`

`string`

The description of the page element. Combined with title to display alt text.

The field is not supported for `[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)` elements.

Union field `element_kind`. The kind of element that this PageElement represents. Each message contains any properties that are specific to that kind of page element. `element_kind` can be only one of the following:

`elementGroup`

``object (`[Group](/slides/api/reference/rest/v1/presentations.pages#Page.Group)`)``

A collection of page elements joined as a single unit.

`shape`

``object (`[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`)``

A generic shape.

`image`

``object (`[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`)``

An image page element.

`video`

``object (`[Video](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`)``

A video page element.

`line`

``object (`[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`)``

A line page element.

`table`

``object (`[Table](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`)``

A table page element.

`wordArt`

``object (`[WordArt](/slides/api/reference/rest/v1/presentations.pages#Page.WordArt)`)``

A word art page element.

`sheetsChart`

``object (`[SheetsChart](/slides/api/reference/rest/v1/presentations.pages/charts#Page.SheetsChart)`)``

A linked chart embedded from Google Sheets. Unlinked charts are represented as images.

### Group

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a joined collection of PageElements.

JSON representation

{
  "children": \[
    {
      object (`[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`)
    }
  \]
}

 

Fields

`children[]`

``object (`[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`)``

The collection of elements in the group. The minimum size of a group is 2.

### WordArt

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing word art.

JSON representation

{
  "renderedText": string
}

 

Fields

`renderedText`

`string`

The text rendered as word art.

### SlideProperties

The properties of `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)` that are only relevant for pages with pageType SLIDE.

JSON representation

{
  "layoutObjectId": string,
  "masterObjectId": string,
  "notesPage": {
    object (`[Page](/slides/api/reference/rest/v1/presentations.pages#Page)`)
  },
  "isSkipped": boolean
}

 

Fields

`layoutObjectId`

`string`

The object ID of the layout that this slide is based on. This property is read-only.

`masterObjectId`

`string`

The object ID of the master that this slide is based on. This property is read-only.

`notesPage`

``object (`[Page](/slides/api/reference/rest/v1/presentations.pages#Page)`)``

The notes page that this slide is associated with. It defines the visual appearance of a notes page when printing or exporting slides with speaker notes. A notes page inherits properties from the `[notes master](/slides/api/reference/rest/v1/presentations#Presentation.FIELDS.notes_master)`. The placeholder shape with type BODY on the notes page contains the speaker notes for this slide. The ID of this shape is identified by the `[speakerNotesObjectId](/slides/api/reference/rest/v1/presentations.pages#Page.NotesProperties.FIELDS.speaker_notes_object_id)` field. The notes page is read-only except for the text content and styles of the speaker notes shape. This property is read-only.

`isSkipped`

`boolean`

Whether the slide is skipped in the presentation mode. Defaults to false.

### LayoutProperties

The properties of `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)` are only relevant for pages with pageType LAYOUT.

JSON representation

{
  "masterObjectId": string,
  "name": string,
  "displayName": string
}

 

Fields

`masterObjectId`

`string`

The object ID of the master that this layout is based on.

`name`

`string`

The name of the layout.

`displayName`

`string`

The human-readable name of the layout.

### NotesProperties

The properties of `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)` that are only relevant for pages with pageType NOTES.

JSON representation

{
  "speakerNotesObjectId": string
}

 

Fields

`speakerNotesObjectId`

`string`

The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `presentations.get` or `pages.get` action will always return the latest object ID.

### MasterProperties

The properties of `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)` that are only relevant for pages with pageType MASTER.

JSON representation

{
  "displayName": string
}

 

Fields

`displayName`

`string`

The human-readable name of the master.

### PageProperties

The properties of the `[Page](/slides/api/reference/rest/v1/presentations.pages#Page)`.

The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either `[SlideProperties](/slides/api/reference/rest/v1/presentations.pages#Page.SlideProperties)` or `[LayoutProperties](/slides/api/reference/rest/v1/presentations.pages#Page.LayoutProperties)`.

JSON representation

{
  "pageBackgroundFill": {
    object (`[PageBackgroundFill](/slides/api/reference/rest/v1/presentations.pages#Page.PageBackgroundFill)`)
  },
  "colorScheme": {
    object (`[ColorScheme](/slides/api/reference/rest/v1/presentations.pages#Page.ColorScheme)`)
  }
}

 

Fields

`pageBackgroundFill`

``object (`[PageBackgroundFill](/slides/api/reference/rest/v1/presentations.pages#Page.PageBackgroundFill)`)``

The background fill of the page. If unset, the background fill is inherited from a parent page if it exists. If the page has no parent, then the background fill defaults to the corresponding fill in the Slides editor.

`colorScheme`

``object (`[ColorScheme](/slides/api/reference/rest/v1/presentations.pages#Page.ColorScheme)`)``

The color scheme of the page. If unset, the color scheme is inherited from a parent page. If the page has no parent, the color scheme uses a default Slides color scheme, matching the defaults in the Slides editor.

Only the concrete colors of the first 12 `[ThemeColorType](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)`s are editable. In addition, only the color scheme on `Master` pages can be updated. To update the field, a color scheme containing mappings from all the first 12 ThemeColorTypes to their concrete colors must be provided. Colors for the remaining ThemeColorTypes will be ignored.

### PageBackgroundFill

The page background fill.

JSON representation

{
  "propertyState": enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`),

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  },
  "stretchedPictureFill": {
    object (`[StretchedPictureFill](/slides/api/reference/rest/v1/presentations.pages#Page.StretchedPictureFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

`propertyState`

``enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)``

The background fill property state.

Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.

Union field `kind`. The kind of background fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid color fill.

`stretchedPictureFill`

``object (`[StretchedPictureFill](/slides/api/reference/rest/v1/presentations.pages#Page.StretchedPictureFill)`)``

Stretched picture fill.

### StretchedPictureFill

The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.

JSON representation

{
  "contentUrl": string,
  "size": {
    object (`[Size](/slides/api/reference/rest/v1/Size)`)
  }
}

 

Fields

`contentUrl`

`string`

Reading the contentUrl:

An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change.

Writing the contentUrl:

The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format.

The provided URL can be at most 2 kB in length.

`size`

``object (`[Size](/slides/api/reference/rest/v1/Size)`)``

The original size of the picture fill. This field is read-only.

### ColorScheme

The palette of predefined colors for a page.

JSON representation

{
  "colors": \[
    {
      object (`[ThemeColorPair](/slides/api/reference/rest/v1/presentations.pages#Page.ThemeColorPair)`)
    }
  \]
}

 

Fields

`colors[]`

``object (`[ThemeColorPair](/slides/api/reference/rest/v1/presentations.pages#Page.ThemeColorPair)`)``

The ThemeColorType and corresponding concrete color pairs.

### ThemeColorPair

A pair mapping a theme color type to the concrete color it represents.

JSON representation

{
  "type": enum (`[ThemeColorType](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)`),
  "color": {
    object (`[RgbColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.RgbColor)`)
  }
}

 

Fields

`type`

``enum (`[ThemeColorType](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)`)``

The type of the theme color.

`color`

``object (`[RgbColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.RgbColor)`)``

The concrete color corresponding to the theme color type above.

Shapes
======

### Shape

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a generic shape that does not have a more specific classification.

JSON representation

{
  "shapeType": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Type)`),
  "text": {
    object (`[TextContent](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextContent)`)
  },
  "shapeProperties": {
    object (`[ShapeProperties](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeProperties)`)
  },
  "placeholder": {
    object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)
  }
}

 

Fields

`shapeType`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Type)`)``

The type of the shape.

`text`

``object (`[TextContent](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextContent)`)``

The text content of the shape.

`shapeProperties`

``object (`[ShapeProperties](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeProperties)`)``

The properties of the shape.

`placeholder`

``object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)``

Placeholders are page elements that inherit from corresponding placeholders on layouts and masters.

If set, the shape is a placeholder shape and any inherited properties can be resolved by looking at the parent placeholder identified by the `[Placeholder.parent_object_id](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder.FIELDS.parent_object_id)` field.

### Type

The shape types.

Many of these shapes correspond to predefined shapes from the ECMA-376 standard. More information on those shapes can be found in the description of the "ST\_ShapeType" simple type in section 20.1.10.55 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`TYPE_UNSPECIFIED`

The shape type that is not predefined.

`TEXT_BOX`

Text box shape.

`RECTANGLE`

Rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'rect'.

`ROUND_RECTANGLE`

Round corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'roundRect'

`ELLIPSE`

Ellipse shape. Corresponds to ECMA-376 ST\_ShapeType 'ellipse'

`ARC`

Curved arc shape. Corresponds to ECMA-376 ST\_ShapeType 'arc'

`BENT_ARROW`

Bent arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'bentArrow'

`BENT_UP_ARROW`

Bent up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'bentUpArrow'

`BEVEL`

Bevel shape. Corresponds to ECMA-376 ST\_ShapeType 'bevel'

`BLOCK_ARC`

Block arc shape. Corresponds to ECMA-376 ST\_ShapeType 'blockArc'

`BRACE_PAIR`

Brace pair shape. Corresponds to ECMA-376 ST\_ShapeType 'bracePair'

`BRACKET_PAIR`

Bracket pair shape. Corresponds to ECMA-376 ST\_ShapeType 'bracketPair'

`CAN`

Can shape. Corresponds to ECMA-376 ST\_ShapeType 'can'

`CHEVRON`

Chevron shape. Corresponds to ECMA-376 ST\_ShapeType 'chevron'

`CHORD`

Chord shape. Corresponds to ECMA-376 ST\_ShapeType 'chord'

`CLOUD`

Cloud shape. Corresponds to ECMA-376 ST\_ShapeType 'cloud'

`CORNER`

Corner shape. Corresponds to ECMA-376 ST\_ShapeType 'corner'

`CUBE`

Cube shape. Corresponds to ECMA-376 ST\_ShapeType 'cube'

`CURVED_DOWN_ARROW`

Curved down arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'curvedDownArrow'

`CURVED_LEFT_ARROW`

Curved left arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'curvedLeftArrow'

`CURVED_RIGHT_ARROW`

Curved right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'curvedRightArrow'

`CURVED_UP_ARROW`

Curved up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'curvedUpArrow'

`DECAGON`

Decagon shape. Corresponds to ECMA-376 ST\_ShapeType 'decagon'

`DIAGONAL_STRIPE`

Diagonal stripe shape. Corresponds to ECMA-376 ST\_ShapeType 'diagStripe'

`DIAMOND`

Diamond shape. Corresponds to ECMA-376 ST\_ShapeType 'diamond'

`DODECAGON`

Dodecagon shape. Corresponds to ECMA-376 ST\_ShapeType 'dodecagon'

`DONUT`

Donut shape. Corresponds to ECMA-376 ST\_ShapeType 'donut'

`DOUBLE_WAVE`

Double wave shape. Corresponds to ECMA-376 ST\_ShapeType 'doubleWave'

`DOWN_ARROW`

Down arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'downArrow'

`DOWN_ARROW_CALLOUT`

Callout down arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'downArrowCallout'

`FOLDED_CORNER`

Folded corner shape. Corresponds to ECMA-376 ST\_ShapeType 'foldedCorner'

`FRAME`

Frame shape. Corresponds to ECMA-376 ST\_ShapeType 'frame'

`HALF_FRAME`

Half frame shape. Corresponds to ECMA-376 ST\_ShapeType 'halfFrame'

`HEART`

Heart shape. Corresponds to ECMA-376 ST\_ShapeType 'heart'

`HEPTAGON`

Heptagon shape. Corresponds to ECMA-376 ST\_ShapeType 'heptagon'

`HEXAGON`

Hexagon shape. Corresponds to ECMA-376 ST\_ShapeType 'hexagon'

`HOME_PLATE`

Home plate shape. Corresponds to ECMA-376 ST\_ShapeType 'homePlate'

`HORIZONTAL_SCROLL`

Horizontal scroll shape. Corresponds to ECMA-376 ST\_ShapeType 'horizontalScroll'

`IRREGULAR_SEAL_1`

Irregular seal 1 shape. Corresponds to ECMA-376 ST\_ShapeType 'irregularSeal1'

`IRREGULAR_SEAL_2`

Irregular seal 2 shape. Corresponds to ECMA-376 ST\_ShapeType 'irregularSeal2'

`LEFT_ARROW`

Left arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftArrow'

`LEFT_ARROW_CALLOUT`

Callout left arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftArrowCallout'

`LEFT_BRACE`

Left brace shape. Corresponds to ECMA-376 ST\_ShapeType 'leftBrace'

`LEFT_BRACKET`

Left bracket shape. Corresponds to ECMA-376 ST\_ShapeType 'leftBracket'

`LEFT_RIGHT_ARROW`

Left right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftRightArrow'

`LEFT_RIGHT_ARROW_CALLOUT`

Callout left right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftRightArrowCallout'

`LEFT_RIGHT_UP_ARROW`

Left right up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftRightUpArrow'

`LEFT_UP_ARROW`

Left up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'leftUpArrow'

`LIGHTNING_BOLT`

Lightning bolt shape. Corresponds to ECMA-376 ST\_ShapeType 'lightningBolt'

`MATH_DIVIDE`

Divide math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathDivide'

`MATH_EQUAL`

Equal math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathEqual'

`MATH_MINUS`

Minus math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathMinus'

`MATH_MULTIPLY`

Multiply math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathMultiply'

`MATH_NOT_EQUAL`

Not equal math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathNotEqual'

`MATH_PLUS`

Plus math shape. Corresponds to ECMA-376 ST\_ShapeType 'mathPlus'

`MOON`

Moon shape. Corresponds to ECMA-376 ST\_ShapeType 'moon'

`NO_SMOKING`

No smoking shape. Corresponds to ECMA-376 ST\_ShapeType 'noSmoking'

`NOTCHED_RIGHT_ARROW`

Notched right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'notchedRightArrow'

`OCTAGON`

Octagon shape. Corresponds to ECMA-376 ST\_ShapeType 'octagon'

`PARALLELOGRAM`

Parallelogram shape. Corresponds to ECMA-376 ST\_ShapeType 'parallelogram'

`PENTAGON`

Pentagon shape. Corresponds to ECMA-376 ST\_ShapeType 'pentagon'

`PIE`

Pie shape. Corresponds to ECMA-376 ST\_ShapeType 'pie'

`PLAQUE`

Plaque shape. Corresponds to ECMA-376 ST\_ShapeType 'plaque'

`PLUS`

Plus shape. Corresponds to ECMA-376 ST\_ShapeType 'plus'

`QUAD_ARROW`

Quad-arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'quadArrow'

`QUAD_ARROW_CALLOUT`

Callout quad-arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'quadArrowCallout'

`RIBBON`

Ribbon shape. Corresponds to ECMA-376 ST\_ShapeType 'ribbon'

`RIBBON_2`

Ribbon 2 shape. Corresponds to ECMA-376 ST\_ShapeType 'ribbon2'

`RIGHT_ARROW`

Right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'rightArrow'

`RIGHT_ARROW_CALLOUT`

Callout right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'rightArrowCallout'

`RIGHT_BRACE`

Right brace shape. Corresponds to ECMA-376 ST\_ShapeType 'rightBrace'

`RIGHT_BRACKET`

Right bracket shape. Corresponds to ECMA-376 ST\_ShapeType 'rightBracket'

`ROUND_1_RECTANGLE`

One round corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'round1Rect'

`ROUND_2_DIAGONAL_RECTANGLE`

Two diagonal round corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'round2DiagRect'

`ROUND_2_SAME_RECTANGLE`

Two same-side round corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'round2SameRect'

`RIGHT_TRIANGLE`

Right triangle shape. Corresponds to ECMA-376 ST\_ShapeType 'rtTriangle'

`SMILEY_FACE`

Smiley face shape. Corresponds to ECMA-376 ST\_ShapeType 'smileyFace'

`SNIP_1_RECTANGLE`

One snip corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'snip1Rect'

`SNIP_2_DIAGONAL_RECTANGLE`

Two diagonal snip corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'snip2DiagRect'

`SNIP_2_SAME_RECTANGLE`

Two same-side snip corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'snip2SameRect'

`SNIP_ROUND_RECTANGLE`

One snip one round corner rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'snipRoundRect'

`STAR_10`

Ten pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star10'

`STAR_12`

Twelve pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star12'

`STAR_16`

Sixteen pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star16'

`STAR_24`

Twenty four pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star24'

`STAR_32`

Thirty two pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star32'

`STAR_4`

Four pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star4'

`STAR_5`

Five pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star5'

`STAR_6`

Six pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star6'

`STAR_7`

Seven pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star7'

`STAR_8`

Eight pointed star shape. Corresponds to ECMA-376 ST\_ShapeType 'star8'

`STRIPED_RIGHT_ARROW`

Striped right arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'stripedRightArrow'

`SUN`

Sun shape. Corresponds to ECMA-376 ST\_ShapeType 'sun'

`TRAPEZOID`

Trapezoid shape. Corresponds to ECMA-376 ST\_ShapeType 'trapezoid'

`TRIANGLE`

Triangle shape. Corresponds to ECMA-376 ST\_ShapeType 'triangle'

`UP_ARROW`

Up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'upArrow'

`UP_ARROW_CALLOUT`

Callout up arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'upArrowCallout'

`UP_DOWN_ARROW`

Up down arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'upDownArrow'

`UTURN_ARROW`

U-turn arrow shape. Corresponds to ECMA-376 ST\_ShapeType 'uturnArrow'

`VERTICAL_SCROLL`

Vertical scroll shape. Corresponds to ECMA-376 ST\_ShapeType 'verticalScroll'

`WAVE`

Wave shape. Corresponds to ECMA-376 ST\_ShapeType 'wave'

`WEDGE_ELLIPSE_CALLOUT`

Callout wedge ellipse shape. Corresponds to ECMA-376 ST\_ShapeType 'wedgeEllipseCallout'

`WEDGE_RECTANGLE_CALLOUT`

Callout wedge rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'wedgeRectCallout'

`WEDGE_ROUND_RECTANGLE_CALLOUT`

Callout wedge round rectangle shape. Corresponds to ECMA-376 ST\_ShapeType 'wedgeRoundRectCallout'

`FLOW_CHART_ALTERNATE_PROCESS`

Alternate process flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartAlternateProcess'

`FLOW_CHART_COLLATE`

Collate flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartCollate'

`FLOW_CHART_CONNECTOR`

Connector flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartConnector'

`FLOW_CHART_DECISION`

Decision flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartDecision'

`FLOW_CHART_DELAY`

Delay flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartDelay'

`FLOW_CHART_DISPLAY`

Display flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartDisplay'

`FLOW_CHART_DOCUMENT`

Document flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartDocument'

`FLOW_CHART_EXTRACT`

Extract flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartExtract'

`FLOW_CHART_INPUT_OUTPUT`

Input output flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartInputOutput'

`FLOW_CHART_INTERNAL_STORAGE`

Internal storage flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartInternalStorage'

`FLOW_CHART_MAGNETIC_DISK`

Magnetic disk flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartMagneticDisk'

`FLOW_CHART_MAGNETIC_DRUM`

Magnetic drum flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartMagneticDrum'

`FLOW_CHART_MAGNETIC_TAPE`

Magnetic tape flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartMagneticTape'

`FLOW_CHART_MANUAL_INPUT`

Manual input flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartManualInput'

`FLOW_CHART_MANUAL_OPERATION`

Manual operation flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartManualOperation'

`FLOW_CHART_MERGE`

Merge flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartMerge'

`FLOW_CHART_MULTIDOCUMENT`

Multi-document flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartMultidocument'

`FLOW_CHART_OFFLINE_STORAGE`

Offline storage flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartOfflineStorage'

`FLOW_CHART_OFFPAGE_CONNECTOR`

Off-page connector flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartOffpageConnector'

`FLOW_CHART_ONLINE_STORAGE`

Online storage flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartOnlineStorage'

`FLOW_CHART_OR`

Or flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartOr'

`FLOW_CHART_PREDEFINED_PROCESS`

Predefined process flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartPredefinedProcess'

`FLOW_CHART_PREPARATION`

Preparation flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartPreparation'

`FLOW_CHART_PROCESS`

Process flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartProcess'

`FLOW_CHART_PUNCHED_CARD`

Punched card flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartPunchedCard'

`FLOW_CHART_PUNCHED_TAPE`

Punched tape flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartPunchedTape'

`FLOW_CHART_SORT`

Sort flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartSort'

`FLOW_CHART_SUMMING_JUNCTION`

Summing junction flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartSummingJunction'

`FLOW_CHART_TERMINATOR`

Terminator flow shape. Corresponds to ECMA-376 ST\_ShapeType 'flowChartTerminator'

`ARROW_EAST`

East arrow shape.

`ARROW_NORTH_EAST`

Northeast arrow shape.

`ARROW_NORTH`

North arrow shape.

`SPEECH`

Speech shape.

`STARBURST`

Star burst shape.

`TEARDROP`

Teardrop shape. Corresponds to ECMA-376 ST\_ShapeType 'teardrop'

`ELLIPSE_RIBBON`

Ellipse ribbon shape. Corresponds to ECMA-376 ST\_ShapeType 'ellipseRibbon'

`ELLIPSE_RIBBON_2`

Ellipse ribbon 2 shape. Corresponds to ECMA-376 ST\_ShapeType 'ellipseRibbon2'

`CLOUD_CALLOUT`

Callout cloud shape. Corresponds to ECMA-376 ST\_ShapeType 'cloudCallout'

`CUSTOM`

Custom shape.

### ShapeProperties

The properties of a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`.

If the shape is a placeholder shape as determined by the `[placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)` field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding `[propertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)` field value.

Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.

JSON representation

{
  "shapeBackgroundFill": {
    object (`[ShapeBackgroundFill](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeBackgroundFill)`)
  },
  "outline": {
    object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)
  },
  "shadow": {
    object (`[Shadow](/slides/api/reference/rest/v1/presentations.pages/other#Page.Shadow)`)
  },
  "link": {
    object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)
  },
  "contentAlignment": enum (`[ContentAlignment](/slides/api/reference/rest/v1/presentations.pages/other#Page.ContentAlignment)`),
  "autofit": {
    object (`[Autofit](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit)`)
  }
}

 

Fields

`shapeBackgroundFill`

``object (`[ShapeBackgroundFill](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.ShapeBackgroundFill)`)``

The background fill of the shape. If unset, the background fill is inherited from a parent placeholder if it exists. If the shape has no parent, then the default background fill depends on the shape type, matching the defaults for new shapes created in the Slides editor.

`outline`

``object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)``

The outline of the shape. If unset, the outline is inherited from a parent placeholder if it exists. If the shape has no parent, then the default outline depends on the shape type, matching the defaults for new shapes created in the Slides editor.

`shadow`

``object (`[Shadow](/slides/api/reference/rest/v1/presentations.pages/other#Page.Shadow)`)``

The shadow properties of the shape. If unset, the shadow is inherited from a parent placeholder if it exists. If the shape has no parent, then the default shadow matches the defaults for new shapes created in the Slides editor. This property is read-only.

`link`

``object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)``

The hyperlink destination of the shape. If unset, there is no link. Links are not inherited from parent placeholders.

`contentAlignment`

``enum (`[ContentAlignment](/slides/api/reference/rest/v1/presentations.pages/other#Page.ContentAlignment)`)``

The alignment of the content in the shape. If `[unspecified](/slides/api/reference/rest/v1/presentations.pages/other#Page.ContentAlignment)`, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.

`autofit`

``object (`[Autofit](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit)`)``

The autofit properties of the shape. This property is only set for shapes that allow text.

### ShapeBackgroundFill

The shape background fill.

JSON representation

{
  "propertyState": enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`),

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

`propertyState`

``enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)``

The background fill property state.

Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.

Union field `kind`. The kind of background fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid color fill.

### Autofit

The autofit properties of a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`.

JSON representation

{
  "autofitType": enum (`[AutofitType](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`),
  "fontScale": number,
  "lineSpacingReduction": number
}

 

Fields

`autofitType`

``enum (`[AutofitType](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`)``

The autofit type of the shape. If the autofit type is `[AUTOFIT_TYPE_UNSPECIFIED](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to `[NONE](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)` if a request is made that might affect text fitting within its bounding text box. In this case the `[fontScale](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit.FIELDS.font_scale)` is applied to the `[fontSize](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle.FIELDS.font_size)` and the `[lineSpacingReduction](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit.FIELDS.line_spacing_reduction)` is applied to the `[lineSpacing](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle.FIELDS.line_spacing)`. Both properties are also reset to default values.

`fontScale`

`number`

The font scale applied to the shape. For shapes with `[autofitType](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit.FIELDS.autofit_type)` `[NONE](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)` or `[SHAPE_AUTOFIT](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`, this value is the default value of 1. For `[TEXT_AUTOFIT](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`, this value multiplied by the `[fontSize](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle.FIELDS.font_size)` gives the font size that is rendered in the editor.

This property is read-only.

`lineSpacingReduction`

`number`

The line spacing reduction applied to the shape. For shapes with `[autofitType](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Autofit.FIELDS.autofit_type)` `[NONE](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)` or `[SHAPE_AUTOFIT](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`, this value is the default value of 0. For `[TEXT_AUTOFIT](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.AutofitType)`, this value subtracted from the `[lineSpacing](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle.FIELDS.line_spacing)` gives the line spacing that is rendered in the editor.

This property is read-only.

### AutofitType

The autofit types of a `[Shape](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape)`.

 

Enums

`AUTOFIT_TYPE_UNSPECIFIED`

The autofit type is unspecified.

`NONE`

Do not autofit.

`TEXT_AUTOFIT`

Shrink text on overflow to fit the shape.

`SHAPE_AUTOFIT`

Resize the shape to fit the text.


Lines
=====


### Line

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a non-connector line, straight connector, curved connector, or bent connector.

JSON representation

{
  "lineProperties": {
    object (`[LineProperties](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineProperties)`)
  },
  "lineType": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)`),
  "lineCategory": enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)
}

 

Fields

`lineProperties`

``object (`[LineProperties](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineProperties)`)``

The properties of the line.

`lineType`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)`)``

The type of the line.

`lineCategory`

``enum (`[LineCategory](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineCategory)`)``

The category of the line.

It matches the `category` specified in `[CreateLineRequest](/slides/api/reference/rest/v1/presentations/request#CreateLineRequest)`, and can be updated with `[UpdateLineCategoryRequest](/slides/api/reference/rest/v1/presentations/request#UpdateLineCategoryRequest)`.

### LineProperties

The properties of the `[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

When unset, these fields default to values that match the appearance of new lines created in the Slides editor.

JSON representation

{
  "lineFill": {
    object (`[LineFill](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineFill)`)
  },
  "weight": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "dashStyle": enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`),
  "startArrow": enum (`[ArrowStyle](/slides/api/reference/rest/v1/presentations.pages/lines#Page.ArrowStyle)`),
  "endArrow": enum (`[ArrowStyle](/slides/api/reference/rest/v1/presentations.pages/lines#Page.ArrowStyle)`),
  "link": {
    object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)
  },
  "startConnection": {
    object (`[LineConnection](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineConnection)`)
  },
  "endConnection": {
    object (`[LineConnection](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineConnection)`)
  }
}

 

Fields

`lineFill`

``object (`[LineFill](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineFill)`)``

The fill of the line. The default line fill matches the defaults for new lines created in the Slides editor.

`weight`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The thickness of the line.

`dashStyle`

``enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`)``

The dash style of the line.

`startArrow`

``enum (`[ArrowStyle](/slides/api/reference/rest/v1/presentations.pages/lines#Page.ArrowStyle)`)``

The style of the arrow at the beginning of the line.

`endArrow`

``enum (`[ArrowStyle](/slides/api/reference/rest/v1/presentations.pages/lines#Page.ArrowStyle)`)``

The style of the arrow at the end of the line.

`link`

``object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)``

The hyperlink destination of the line. If unset, there is no link.

`startConnection`

``object (`[LineConnection](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineConnection)`)``

The connection at the beginning of the line. If unset, there is no connection.

Only lines with a `[Type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)` indicating it is a "connector" can have a `startConnection`.

`endConnection`

``object (`[LineConnection](/slides/api/reference/rest/v1/presentations.pages/lines#Page.LineConnection)`)``

The connection at the end of the line. If unset, there is no connection.

Only lines with a `[Type](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Type_4)` indicating it is a "connector" can have an `endConnection`.

### LineFill

The fill of the line.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of line fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid color fill.

### ArrowStyle

The kinds of start and end forms with which linear geometry can be rendered. Some values are based on the "ST\_LineEndType" simple type described in section 20.1.10.33 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`ARROW_STYLE_UNSPECIFIED`

An unspecified arrow style.

`NONE`

No arrow.

`STEALTH_ARROW`

Arrow with notched back. Corresponds to ECMA-376 ST\_LineEndType value 'stealth'.

`FILL_ARROW`

Filled arrow. Corresponds to ECMA-376 ST\_LineEndType value 'triangle'.

`FILL_CIRCLE`

Filled circle. Corresponds to ECMA-376 ST\_LineEndType value 'oval'.

`FILL_SQUARE`

Filled square.

`FILL_DIAMOND`

Filled diamond. Corresponds to ECMA-376 ST\_LineEndType value 'diamond'.

`OPEN_ARROW`

Hollow arrow.

`OPEN_CIRCLE`

Hollow circle.

`OPEN_SQUARE`

Hollow square.

`OPEN_DIAMOND`

Hollow diamond.

### LineConnection

The properties for one end of a `[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)` connection.

JSON representation

{
  "connectedObjectId": string,
  "connectionSiteIndex": integer
}

 

Fields

`connectedObjectId`

`string`

The object ID of the connected page element.

Some page elements, such as `[groups](/slides/api/reference/rest/v1/presentations.pages#Page.Group)`, `[tables](/slides/api/reference/rest/v1/presentations.pages/tables#Page.Table)`, and `[lines](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)` do not have connection sites and therefore cannot be connected to a connector line.

`connectionSiteIndex`

`integer`

The index of the connection site on the connected page element.

In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the "cnx" attribute in section 20.1.9.9 and Annex H. "Predefined DrawingML Shape and Text Geometries" of "Office Open XML File Formats-Fundamentals and Markup Language Reference", part 1 of [ECMA-376 5th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

The position of each connection site can also be viewed from Slides editor.

### Type

The line types.

Derived from a subset of the values of the "ST\_ShapeType" simple type in section 20.1.10.55 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`TYPE_UNSPECIFIED`

An unspecified line type.

`STRAIGHT_CONNECTOR_1`

Straight connector 1 form. Corresponds to ECMA-376 ST\_ShapeType 'straightConnector1'.

`BENT_CONNECTOR_2`

Bent connector 2 form. Corresponds to ECMA-376 ST\_ShapeType 'bentConnector2'.

`BENT_CONNECTOR_3`

Bent connector 3 form. Corresponds to ECMA-376 ST\_ShapeType 'bentConnector3'.

`BENT_CONNECTOR_4`

Bent connector 4 form. Corresponds to ECMA-376 ST\_ShapeType 'bentConnector4'.

`BENT_CONNECTOR_5`

Bent connector 5 form. Corresponds to ECMA-376 ST\_ShapeType 'bentConnector5'.

`CURVED_CONNECTOR_2`

Curved connector 2 form. Corresponds to ECMA-376 ST\_ShapeType 'curvedConnector2'.

`CURVED_CONNECTOR_3`

Curved connector 3 form. Corresponds to ECMA-376 ST\_ShapeType 'curvedConnector3'.

`CURVED_CONNECTOR_4`

Curved connector 4 form. Corresponds to ECMA-376 ST\_ShapeType 'curvedConnector4'.

`CURVED_CONNECTOR_5`

Curved connector 5 form. Corresponds to ECMA-376 ST\_ShapeType 'curvedConnector5'.

`STRAIGHT_LINE`

Straight line. Corresponds to ECMA-376 ST\_ShapeType 'line'. This line type is not a connector.

### LineCategory

The catgory of a `[Line](/slides/api/reference/rest/v1/presentations.pages/lines#Page.Line)`.

 

Enums

`LINE_CATEGORY_UNSPECIFIED`

Unspecified line category.

`STRAIGHT`

Straight connectors, including straight connector 1.

`BENT`

Bent connectors, including bent connector 2 to 5.

`CURVED`

Curved connectors, including curved connector 2 to 5.


Images
======

### Image

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing an image.

JSON representation

{
  "contentUrl": string,
  "imageProperties": {
    object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)
  },
  "sourceUrl": string,
  "placeholder": {
    object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)
  }
}

 

Fields

`contentUrl`

`string`

An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.

`imageProperties`

``object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)``

The properties of the image.

`sourceUrl`

`string`

The source URL is the URL used to insert the image. The source URL can be empty.

`placeholder`

``object (`[Placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`)``

Placeholders are page elements that inherit from corresponding placeholders on layouts and masters.

If set, the image is a placeholder image and any inherited properties can be resolved by looking at the parent placeholder identified by the `[Placeholder.parent_object_id](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder.FIELDS.parent_object_id)` field.


Videos
======


### Video

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a video.

JSON representation

{
  "url": string,
  "source": enum (`[Source](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Source)`),
  "id": string,
  "videoProperties": {
    object (`[VideoProperties](/slides/api/reference/rest/v1/presentations.pages/videos#Page.VideoProperties)`)
  }
}

 

Fields

`url`

`string`

An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.

`source`

``enum (`[Source](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Source)`)``

The video source.

`id`

`string`

The video source's unique identifier for this video.

`videoProperties`

``object (`[VideoProperties](/slides/api/reference/rest/v1/presentations.pages/videos#Page.VideoProperties)`)``

The properties of the video.

### Source

The video sources.

 

Enums

`SOURCE_UNSPECIFIED`

The video source is unspecified.

`YOUTUBE`

The video source is YouTube.

`DRIVE`

The video source is Google Drive.

### VideoProperties

The properties of the `[Video](/slides/api/reference/rest/v1/presentations.pages/videos#Page.Video)`.

JSON representation

{
  "outline": {
    object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)
  },
  "autoPlay": boolean,
  "start": integer,
  "end": integer,
  "mute": boolean
}

 

Fields

`outline`

``object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)``

The outline of the video. The default outline matches the defaults for new videos created in the Slides editor.

`autoPlay`

`boolean`

Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.

`start`

`integer`

The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.

`end`

`integer`

The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.

`mute`

`boolean`

Whether to mute the audio during video playback. Defaults to false.


Tables
======

### Table

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a table.

JSON representation

{
  "rows": integer,
  "columns": integer,
  "tableRows": \[
    {
      object (`[TableRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRow)`)
    }
  \],
  "tableColumns": \[
    {
      object (`[TableColumnProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableColumnProperties)`)
    }
  \],
  "horizontalBorderRows": \[
    {
      object (`[TableBorderRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderRow)`)
    }
  \],
  "verticalBorderRows": \[
    {
      object (`[TableBorderRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderRow)`)
    }
  \]
}

 

Fields

`rows`

`integer`

Number of rows in the table.

`columns`

`integer`

Number of columns in the table.

`tableRows[]`

``object (`[TableRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRow)`)``

Properties and contents of each row.

Cells that span multiple rows are contained in only one of these rows and have a `[rowSpan](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell.FIELDS.row_span)` greater than 1.

`tableColumns[]`

``object (`[TableColumnProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableColumnProperties)`)``

Properties of each column.

`horizontalBorderRows[]`

``object (`[TableBorderRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderRow)`)``

Properties of horizontal cell borders.

A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.

`verticalBorderRows[]`

``object (`[TableBorderRow](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderRow)`)``

Properties of vertical cell borders.

A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.

### TableRow

Properties and contents of each row in a table.

JSON representation

{
  "rowHeight": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "tableRowProperties": {
    object (`[TableRowProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRowProperties)`)
  },
  "tableCells": \[
    {
      object (`[TableCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell)`)
    }
  \]
}

 

Fields

`rowHeight`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

Height of a row.

`tableRowProperties`

``object (`[TableRowProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableRowProperties)`)``

Properties of the row.

`tableCells[]`

``object (`[TableCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell)`)``

Properties and contents of each cell.

Cells that span multiple columns are represented only once with a `[columnSpan](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell.FIELDS.column_span)` greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.

### TableRowProperties

Properties of each row in a table.

JSON representation

{
  "minRowHeight": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  }
}

 

Fields

`minRowHeight`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

Minimum height of the row. The row will be rendered in the Slides editor at a height equal to or greater than this value in order to show all the text in the row's cell(s).

### TableCell

Properties and contents of each table cell.

JSON representation

{
  "location": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "rowSpan": integer,
  "columnSpan": integer,
  "text": {
    object (`[TextContent](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextContent)`)
  },
  "tableCellProperties": {
    object (`[TableCellProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellProperties)`)
  }
}

 

Fields

`location`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The location of the cell within the table.

`rowSpan`

`integer`

Row span of the cell.

`columnSpan`

`integer`

Column span of the cell.

`text`

``object (`[TextContent](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextContent)`)``

The text content of the cell.

`tableCellProperties`

``object (`[TableCellProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellProperties)`)``

The properties of the table cell.

### TableCellLocation

A location of a single table cell within a table.

JSON representation

{
  "rowIndex": integer,
  "columnIndex": integer
}

 

Fields

`rowIndex`

`integer`

The 0-based row index.

`columnIndex`

`integer`

The 0-based column index.

### TableCellProperties

The properties of the `[TableCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCell)`.

JSON representation

{
  "tableCellBackgroundFill": {
    object (`[TableCellBackgroundFill](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellBackgroundFill)`)
  },
  "contentAlignment": enum (`[ContentAlignment](/slides/api/reference/rest/v1/presentations.pages/other#Page.ContentAlignment)`)
}

 

Fields

`tableCellBackgroundFill`

``object (`[TableCellBackgroundFill](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellBackgroundFill)`)``

The background fill of the table cell. The default fill matches the fill for newly created table cells in the Slides editor.

`contentAlignment`

``enum (`[ContentAlignment](/slides/api/reference/rest/v1/presentations.pages/other#Page.ContentAlignment)`)``

The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.

### TableCellBackgroundFill

The table cell background fill.

JSON representation

{
  "propertyState": enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`),

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

`propertyState`

``enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)``

The background fill property state.

Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.

Union field `kind`. The kind of background fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid color fill.

### TableColumnProperties

Properties of each column in a table.

JSON representation

{
  "columnWidth": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  }
}

 

Fields

`columnWidth`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

Width of a column.

### TableBorderRow

Contents of each border row in a table.

JSON representation

{
  "tableBorderCells": \[
    {
      object (`[TableBorderCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderCell)`)
    }
  \]
}

 

Fields

`tableBorderCells[]`

``object (`[TableBorderCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderCell)`)``

Properties of each border cell. When a border's adjacent table cells are merged, it is not included in the response.

### TableBorderCell

The properties of each border cell.

JSON representation

{
  "location": {
    object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)
  },
  "tableBorderProperties": {
    object (`[TableBorderProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderProperties)`)
  }
}

 

Fields

`location`

``object (`[TableCellLocation](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableCellLocation)`)``

The location of the border within the border table.

`tableBorderProperties`

``object (`[TableBorderProperties](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderProperties)`)``

The border properties.

### TableBorderProperties

The border styling properties of the `[TableBorderCell](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderCell)`.

JSON representation

{
  "tableBorderFill": {
    object (`[TableBorderFill](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderFill)`)
  },
  "weight": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "dashStyle": enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`)
}

 

Fields

`tableBorderFill`

``object (`[TableBorderFill](/slides/api/reference/rest/v1/presentations.pages/tables#Page.TableBorderFill)`)``

The fill of the table border.

`weight`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The thickness of the border.

`dashStyle`

``enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`)``

The dash style of the border.

### TableBorderFill

The fill of the border.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid fill.


Charts
======

### SheetsChart

A `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)` kind representing a linked chart embedded from Google Sheets.

JSON representation

{
  "spreadsheetId": string,
  "chartId": integer,
  "contentUrl": string,
  "sheetsChartProperties": {
    object (`[SheetsChartProperties](/slides/api/reference/rest/v1/presentations.pages/charts#Page.SheetsChartProperties)`)
  }
}

 

Fields

`spreadsheetId`

`string`

The ID of the Google Sheets spreadsheet that contains the source chart.

`chartId`

`integer`

The ID of the specific chart in the Google Sheets spreadsheet that is embedded.

`contentUrl`

`string`

The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.

`sheetsChartProperties`

``object (`[SheetsChartProperties](/slides/api/reference/rest/v1/presentations.pages/charts#Page.SheetsChartProperties)`)``

The properties of the Sheets chart.

### SheetsChartProperties

The properties of the `[SheetsChart](/slides/api/reference/rest/v1/presentations.pages/charts#Page.SheetsChart)`.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "chartImageProperties": {
    object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of Sheets chart properties. `kind` can be only one of the following:

`chartImageProperties`

``object (`[ImageProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.ImageProperties)`)``

The properties of the embedded chart image.



Text
====


### TextContent

The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.

JSON representation

{
  "textElements": \[
    {
      object (`[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)`)
    }
  \],
  "lists": {
    string: {
      object (`[List](/slides/api/reference/rest/v1/presentations.pages/text#Page.List)`)
    },
    ...
  }
}

 

Fields

`textElements[]`

``object (`[TextElement](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextElement)`)``

The text contents broken down into its component parts, including styling information. This property is read-only.

`lists`

``map (key: string, value: object ( `[List](/slides/api/reference/rest/v1/presentations.pages/text#Page.List)`))``

The bulleted lists contained in this text, keyed by list ID.

### TextElement

A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.

JSON representation

{
  "startIndex": integer,
  "endIndex": integer,

  // Union field `kind` can be only one of the following:
  "paragraphMarker": {
    object (`[ParagraphMarker](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphMarker)`)
  },
  "textRun": {
    object (`[TextRun](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextRun)`)
  },
  "autoText": {
    object (`[AutoText](/slides/api/reference/rest/v1/presentations.pages/text#Page.AutoText)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

`startIndex`

`integer`

The zero-based start index of this text element, in Unicode code units.

`endIndex`

`integer`

The zero-based end index of this text element, exclusive, in Unicode code units.

Union field `kind`. The kind of text that this element represents. `kind` can be only one of the following:

`paragraphMarker`

``object (`[ParagraphMarker](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphMarker)`)``

A marker representing the beginning of a new paragraph.

The `startIndex` and `endIndex` of this TextElement represent the range of the paragraph. Other TextElements with an index range contained inside this paragraph's range are considered to be part of this paragraph. The range of indices of two separate paragraphs will never overlap.

`textRun`

``object (`[TextRun](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextRun)`)``

A TextElement representing a run of text where all of the characters in the run have the same `[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`.

The `startIndex` and `endIndex` of TextRuns will always be fully contained in the index range of a single `paragraphMarker` TextElement. In other words, a TextRun will never span multiple paragraphs.

`autoText`

``object (`[AutoText](/slides/api/reference/rest/v1/presentations.pages/text#Page.AutoText)`)``

A TextElement representing a spot in the text that is dynamically replaced with content that can change over time.

### ParagraphMarker

A TextElement kind that represents the beginning of a new paragraph.

JSON representation

{
  "style": {
    object (`[ParagraphStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle)`)
  },
  "bullet": {
    object (`[Bullet](/slides/api/reference/rest/v1/presentations.pages/text#Page.Bullet)`)
  }
}

 

Fields

`style`

``object (`[ParagraphStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.ParagraphStyle)`)``

The paragraph's style

`bullet`

``object (`[Bullet](/slides/api/reference/rest/v1/presentations.pages/text#Page.Bullet)`)``

The bullet for this paragraph. If not present, the paragraph does not belong to a list.

### ParagraphStyle

Styles that apply to a whole paragraph.

If this text is contained in a shape with a parent `[placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists:

*   A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder.
*   A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder.

Inherited paragraph styles are represented as unset fields in this message.

JSON representation

{
  "lineSpacing": number,
  "alignment": enum (`[Alignment](/slides/api/reference/rest/v1/presentations.pages/text#Page.Alignment)`),
  "indentStart": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "indentEnd": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "spaceAbove": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "spaceBelow": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "indentFirstLine": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "direction": enum (`[TextDirection](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextDirection)`),
  "spacingMode": enum (`[SpacingMode](/slides/api/reference/rest/v1/presentations.pages/text#Page.SpacingMode)`)
}

 

Fields

`lineSpacing`

`number`

The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.

`alignment`

``enum (`[Alignment](/slides/api/reference/rest/v1/presentations.pages/text#Page.Alignment)`)``

The text alignment for this paragraph.

`indentStart`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The amount indentation for the paragraph on the side that corresponds to the start of the text, based on the current text direction. If unset, the value is inherited from the parent.

`indentEnd`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The amount indentation for the paragraph on the side that corresponds to the end of the text, based on the current text direction. If unset, the value is inherited from the parent.

`spaceAbove`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The amount of extra space above the paragraph. If unset, the value is inherited from the parent.

`spaceBelow`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The amount of extra space below the paragraph. If unset, the value is inherited from the parent.

`indentFirstLine`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The amount of indentation for the start of the first line of the paragraph. If unset, the value is inherited from the parent.

`direction`

``enum (`[TextDirection](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextDirection)`)``

The text direction of this paragraph. If unset, the value defaults to `[LEFT_TO_RIGHT](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextDirection)` since text direction is not inherited.

`spacingMode`

``enum (`[SpacingMode](/slides/api/reference/rest/v1/presentations.pages/text#Page.SpacingMode)`)``

The spacing mode for the paragraph.

### Alignment

The types of text alignment for a paragraph.

 

Enums

`ALIGNMENT_UNSPECIFIED`

The paragraph alignment is inherited from the parent.

`START`

The paragraph is aligned to the start of the line. Left-aligned for LTR text, right-aligned otherwise.

`CENTER`

The paragraph is centered.

`END`

The paragraph is aligned to the end of the line. Right-aligned for LTR text, left-aligned otherwise.

`JUSTIFIED`

The paragraph is justified.

### TextDirection

The directions text can flow in.

 

Enums

`TEXT_DIRECTION_UNSPECIFIED`

The text direction is inherited from the parent.

`LEFT_TO_RIGHT`

The text goes from left to right.

`RIGHT_TO_LEFT`

The text goes from right to left.

### SpacingMode

The different modes for paragraph spacing.

 

Enums

`SPACING_MODE_UNSPECIFIED`

The spacing mode is inherited from the parent.

`NEVER_COLLAPSE`

Paragraph spacing is always rendered.

`COLLAPSE_LISTS`

Paragraph spacing is skipped between list elements.

### Bullet

Describes the bullet of a paragraph.

JSON representation

{
  "listId": string,
  "nestingLevel": integer,
  "glyph": string,
  "bulletStyle": {
    object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)
  }
}

 

Fields

`listId`

`string`

The ID of the list this paragraph belongs to.

`nestingLevel`

`integer`

The nesting level of this paragraph in the list.

`glyph`

`string`

The rendered bullet glyph for this paragraph.

`bulletStyle`

``object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)``

The paragraph specific text style applied to this bullet.

### TextStyle

Represents the styling that can be applied to a TextRun.

If this text is contained in a shape with a parent `[placeholder](/slides/api/reference/rest/v1/presentations.pages/other#Page.Placeholder)`, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists:

*   A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder.
*   A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder.

Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.

JSON representation

{
  "backgroundColor": {
    object (`[OptionalColor](/slides/api/reference/rest/v1/presentations.pages/text#Page.OptionalColor)`)
  },
  "foregroundColor": {
    object (`[OptionalColor](/slides/api/reference/rest/v1/presentations.pages/text#Page.OptionalColor)`)
  },
  "bold": boolean,
  "italic": boolean,
  "fontFamily": string,
  "fontSize": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "link": {
    object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)
  },
  "baselineOffset": enum (`[BaselineOffset](/slides/api/reference/rest/v1/presentations.pages/text#Page.BaselineOffset)`),
  "smallCaps": boolean,
  "strikethrough": boolean,
  "underline": boolean,
  "weightedFontFamily": {
    object (`[WeightedFontFamily](/slides/api/reference/rest/v1/presentations.pages/text#Page.WeightedFontFamily)`)
  }
}

 

Fields

`backgroundColor`

``object (`[OptionalColor](/slides/api/reference/rest/v1/presentations.pages/text#Page.OptionalColor)`)``

The background color of the text. If set, the color is either opaque or transparent, depending on if the `opaqueColor` field in it is set.

`foregroundColor`

``object (`[OptionalColor](/slides/api/reference/rest/v1/presentations.pages/text#Page.OptionalColor)`)``

The color of the text itself. If set, the color is either opaque or transparent, depending on if the `opaqueColor` field in it is set.

`bold`

`boolean`

Whether or not the text is rendered as bold.

`italic`

`boolean`

Whether or not the text is italicized.

`fontFamily`

`string`

The font family of the text.

The font family can be any font from the Font menu in Slides or from [Google Fonts](https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.

Some fonts can affect the weight of the text. If an update request specifies values for both `fontFamily` and `bold`, the explicitly-set `bold` value is used.

`fontSize`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The size of the text's font. When read, the `fontSize` will specified in points.

`link`

``object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)``

The hyperlink destination of the text. If unset, there is no link. Links are not inherited from parent text.

Changing the link in an update request causes some other changes to the text style of the range:

*   When setting a link, the text foreground color will be set to `[ThemeColorType.HYPERLINK](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)` and the text will be underlined. If these fields are modified in the same request, those values will be used instead of the link defaults.
*   Setting a link on a text range that overlaps with an existing link will also update the existing link to point to the new URL.
*   Links are not settable on newline characters. As a result, setting a link on a text range that crosses a paragraph boundary, such as `"ABC\n123"`, will separate the newline character(s) into their own text runs. The link will be applied separately to the runs before and after the newline.
*   Removing a link will update the text style of the range to match the style of the preceding text (or the default text styles if the preceding text is another link) unless different styles are being set in the same request.

`baselineOffset`

``enum (`[BaselineOffset](/slides/api/reference/rest/v1/presentations.pages/text#Page.BaselineOffset)`)``

The text's vertical offset from its normal position.

Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `fontSize` field. The `fontSize` itself is not affected by changes in this field.

`smallCaps`

`boolean`

Whether or not the text is in small capital letters.

`strikethrough`

`boolean`

Whether or not the text is struck through.

`underline`

`boolean`

Whether or not the text is underlined.

`weightedFontFamily`

``object (`[WeightedFontFamily](/slides/api/reference/rest/v1/presentations.pages/text#Page.WeightedFontFamily)`)``

The font family and rendered weight of the text.

This field is an extension of `fontFamily` meant to support explicit font weights without breaking backwards compatibility. As such, when reading the style of a range of text, the value of `weightedFontFamily#fontFamily` will always be equal to that of `fontFamily`. However, when writing, if both fields are included in the field mask (either explicitly or through the wildcard `"*"`), their values are reconciled as follows:

*   If `fontFamily` is set and `weightedFontFamily` is not, the value of `fontFamily` is applied with weight `400` ("normal").
*   If both fields are set, the value of `fontFamily` must match that of `weightedFontFamily#fontFamily`. If so, the font family and weight of `weightedFontFamily` is applied. Otherwise, a 400 bad request error is returned.
*   If `weightedFontFamily` is set and `fontFamily` is not, the font family and weight of `weightedFontFamily` is applied.
*   If neither field is set, the font family and weight of the text inherit from the parent. Note that these properties cannot inherit separately from each other.

If an update request specifies values for both `weightedFontFamily` and `bold`, the `weightedFontFamily` is applied first, then `bold`.

If `weightedFontFamily#weight` is not set, it defaults to `400`.

If `weightedFontFamily` is set, then `weightedFontFamily#fontFamily` must also be set with a non-empty value. Otherwise, a 400 bad request error is returned.

### OptionalColor

A color that can either be fully opaque or fully transparent.

JSON representation

{
  "opaqueColor": {
    object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)
  }
}

 

Fields

`opaqueColor`

``object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)``

If set, this will be used as an opaque color. If unset, this represents a transparent color.

### BaselineOffset

The ways in which text can be vertically offset from its normal position.

 

Enums

`BASELINE_OFFSET_UNSPECIFIED`

The text's baseline offset is inherited from the parent.

`NONE`

The text is not vertically offset.

`SUPERSCRIPT`

The text is vertically offset upwards (superscript).

`SUBSCRIPT`

The text is vertically offset downwards (subscript).

### WeightedFontFamily

Represents a font family and weight used to style a TextRun.

JSON representation

{
  "fontFamily": string,
  "weight": integer
}

 

Fields

`fontFamily`

`string`

The font family of the text.

The font family can be any font from the Font menu in Slides or from [Google Fonts](https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.

`weight`

`integer`

The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700` are not bold. The default value is `400` ("normal").

### TextRun

A TextElement kind that represents a run of text that all has the same styling.

JSON representation

{
  "content": string,
  "style": {
    object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)
  }
}

 

Fields

`content`

`string`

The text of this run.

`style`

``object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)``

The styling applied to this run.

### AutoText

A TextElement kind that represents auto text.

JSON representation

{
  "type": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/text#Page.Type_1)`),
  "content": string,
  "style": {
    object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)
  }
}

 

Fields

`type`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/text#Page.Type_1)`)``

The type of this auto text.

`content`

`string`

The rendered content of this auto text, if available.

`style`

``object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)``

The styling applied to this auto text.

### Type

The types of auto text

 

Enums

`TYPE_UNSPECIFIED`

An unspecified autotext type.

`SLIDE_NUMBER`

Type for autotext that represents the current slide number.

### List

A List describes the look and feel of bullets belonging to paragraphs associated with a list. A paragraph that is part of a list has an implicit reference to that list's ID.

JSON representation

{
  "listId": string,
  "nestingLevel": {
    integer: {
      object (`[NestingLevel](/slides/api/reference/rest/v1/presentations.pages/text#Page.NestingLevel)`)
    },
    ...
  }
}

 

Fields

`listId`

`string`

The ID of the list.

`nestingLevel`

``map (key: integer, value: object ( `[NestingLevel](/slides/api/reference/rest/v1/presentations.pages/text#Page.NestingLevel)`))``

A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.

### NestingLevel

Contains properties describing the look and feel of a list bullet at a given level of nesting.

JSON representation

{
  "bulletStyle": {
    object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)
  }
}

 

Fields

`bulletStyle`

``object (`[TextStyle](/slides/api/reference/rest/v1/presentations.pages/text#Page.TextStyle)`)``

The style of a bullet at this level of nesting.



Other
=====


### AffineTransform

AffineTransform uses a 3x3 matrix with an implied last row of \[ 0 0 1 \] to transform source coordinates (x,y) into destination coordinates (x', y') according to:

 [ x']   [  scaleX  shearX  translateX  ] [ x ]
     [ y'] = [  shearY  scaleY  translateY  ] [ y ]
     [ 1 ]   [      0       0         1     ] [ 1 ]

After transformation,

 x' = scaleX * x + shearX * y + translateX;
     y' = scaleY * y + shearY * x + translateY;

This message is therefore composed of these six matrix elements.

JSON representation

{
  "scaleX": number,
  "scaleY": number,
  "shearX": number,
  "shearY": number,
  "translateX": number,
  "translateY": number,
  "unit": enum (`[Unit](/slides/api/reference/rest/v1/Unit)`)
}

 

Fields

`scaleX`

`number`

The X coordinate scaling element.

`scaleY`

`number`

The Y coordinate scaling element.

`shearX`

`number`

The X coordinate shearing element.

`shearY`

`number`

The Y coordinate shearing element.

`translateX`

`number`

The X coordinate translation element.

`translateY`

`number`

The Y coordinate translation element.

`unit`

``enum (`[Unit](/slides/api/reference/rest/v1/Unit)`)``

The units for translate elements.

### OpaqueColor

A themeable solid color value.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "rgbColor": {
    object (`[RgbColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.RgbColor)`)
  },
  "themeColor": enum (`[ThemeColorType](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)`)
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of color value. `kind` can be only one of the following:

`rgbColor`

``object (`[RgbColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.RgbColor)`)``

An opaque RGB color.

`themeColor`

``enum (`[ThemeColorType](/slides/api/reference/rest/v1/presentations.pages/other#Page.ThemeColorType)`)``

An opaque theme color.

### RgbColor

An RGB color.

JSON representation

{
  "red": number,
  "green": number,
  "blue": number
}

 

Fields

`red`

`number`

The red component of the color, from 0.0 to 1.0.

`green`

`number`

The green component of the color, from 0.0 to 1.0.

`blue`

`number`

The blue component of the color, from 0.0 to 1.0.

### ThemeColorType

Theme color types.

`[PageProperties](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties)` contain a `[ColorScheme](/slides/api/reference/rest/v1/presentations.pages#Page.ColorScheme)` that defines a mapping of these theme color types to concrete colors.

 

Enums

`THEME_COLOR_TYPE_UNSPECIFIED`

Unspecified theme color. This value should not be used.

`DARK1`

Represents the first dark color.

`LIGHT1`

Represents the first light color.

`DARK2`

Represents the second dark color.

`LIGHT2`

Represents the second light color.

`ACCENT1`

Represents the first accent color.

`ACCENT2`

Represents the second accent color.

`ACCENT3`

Represents the third accent color.

`ACCENT4`

Represents the fourth accent color.

`ACCENT5`

Represents the fifth accent color.

`ACCENT6`

Represents the sixth accent color.

`HYPERLINK`

Represents the color to use for hyperlinks.

`FOLLOWED_HYPERLINK`

Represents the color to use for visited hyperlinks.

`TEXT1`

Represents the first text color.

`BACKGROUND1`

Represents the first background color.

`TEXT2`

Represents the second text color.

`BACKGROUND2`

Represents the second background color.

### Link

A hypertext link.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "url": string,
  "relativeLink": enum (`[RelativeSlideLink](/slides/api/reference/rest/v1/presentations.pages/other#Page.RelativeSlideLink)`),
  "pageObjectId": string,
  "slideIndex": integer
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kinds of links. `kind` can be only one of the following:

`url`

`string`

If set, indicates this is a link to the external web page at this URL.

`relativeLink`

``enum (`[RelativeSlideLink](/slides/api/reference/rest/v1/presentations.pages/other#Page.RelativeSlideLink)`)``

If set, indicates this is a link to a slide in this presentation, addressed by its position.

`pageObjectId`

`string`

If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.

`slideIndex`

`integer`

If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.

### RelativeSlideLink

The kinds of relative links.

 

Enums

`RELATIVE_SLIDE_LINK_UNSPECIFIED`

An unspecified relative slide link.

`NEXT_SLIDE`

A link to the next slide.

`PREVIOUS_SLIDE`

A link to the previous slide.

`FIRST_SLIDE`

A link to the first slide in the presentation.

`LAST_SLIDE`

A link to the last slide in the presentation.

### PropertyState

The possible states of a property.

 

Enums

`RENDERED`

If a property's state is RENDERED, then the element has the corresponding property when rendered on a page. If the element is a placeholder shape as determined by the `[placeholder](/slides/api/reference/rest/v1/presentations.pages/shapes#Page.Shape.FIELDS.placeholder)` field, and it inherits from a placeholder shape, the corresponding field may be unset, meaning that the property value is inherited from a parent placeholder. If the element does not inherit, then the field will contain the rendered value. This is the default value.

`NOT_RENDERED`

If a property's state is NOT\_RENDERED, then the element does not have the corresponding property when rendered on a page. However, the field may still be set so it can be inherited by child shapes. To remove a property from a rendered element, set its propertyState to NOT\_RENDERED.

`INHERIT`

If a property's state is INHERIT, then the property state uses the value of corresponding `propertyState` field on the parent shape. Elements that do not inherit will never have an INHERIT property state.

### SolidFill

A solid color fill. The page or page element is filled entirely with the specified color value.

If any field is unset, its value may be inherited from a parent placeholder if it exists.

JSON representation

{
  "color": {
    object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)
  },
  "alpha": number
}

 

Fields

`color`

``object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)``

The color value of the solid fill.

`alpha`

`number`

The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation:

pixel color = alpha \* (color) + (1.0 - alpha) \* (background color)

This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.

### Outline

The outline of a `[PageElement](/slides/api/reference/rest/v1/presentations.pages#Page.PageElement)`.

If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.

JSON representation

{
  "outlineFill": {
    object (`[OutlineFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.OutlineFill)`)
  },
  "weight": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "dashStyle": enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`),
  "propertyState": enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)
}

 

Fields

`outlineFill`

``object (`[OutlineFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.OutlineFill)`)``

The fill of the outline.

`weight`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The thickness of the outline.

`dashStyle`

``enum (`[DashStyle](/slides/api/reference/rest/v1/presentations.pages/other#Page.DashStyle)`)``

The dash style of the outline.

`propertyState`

``enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)``

The outline property state.

Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.

### OutlineFill

The fill of the outline.

JSON representation

{

  // Union field `kind` can be only one of the following:
  "solidFill": {
    object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)
  }
  // End of list of possible types for union field `kind`.
}

 

Fields

Union field `kind`. The kind of outline fill. `kind` can be only one of the following:

`solidFill`

``object (`[SolidFill](/slides/api/reference/rest/v1/presentations.pages/other#Page.SolidFill)`)``

Solid color fill.

### DashStyle

The kinds of dashes with which linear geometry can be rendered. These values are based on the "ST\_PresetLineDashVal" simple type described in section 20.1.10.48 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`DASH_STYLE_UNSPECIFIED`

Unspecified dash style.

`SOLID`

Solid line. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'solid'. This is the default dash style.

`DOT`

Dotted line. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'dot'.

`DASH`

Dashed line. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'dash'.

`DASH_DOT`

Alternating dashes and dots. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'dashDot'.

`LONG_DASH`

Line with large dashes. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'lgDash'.

`LONG_DASH_DOT`

Alternating large dashes and dots. Corresponds to ECMA-376 ST\_PresetLineDashVal value 'lgDashDot'.

### Shadow

The shadow properties of a page element.

If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.

JSON representation

{
  "type": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/other#Page.Type_2)`),
  "transform": {
    object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)
  },
  "alignment": enum (`[RectanglePosition](/slides/api/reference/rest/v1/presentations.pages/other#Page.RectanglePosition)`),
  "blurRadius": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "color": {
    object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)
  },
  "alpha": number,
  "rotateWithShape": boolean,
  "propertyState": enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)
}

 

Fields

`type`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/other#Page.Type_2)`)``

The type of the shadow. This property is read-only.

`transform`

``object (`[AffineTransform](/slides/api/reference/rest/v1/presentations.pages/other#Page.AffineTransform)`)``

Transform that encodes the translate, scale, and skew of the shadow, relative to the alignment position.

`alignment`

``enum (`[RectanglePosition](/slides/api/reference/rest/v1/presentations.pages/other#Page.RectanglePosition)`)``

The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.

`blurRadius`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The radius of the shadow blur. The larger the radius, the more diffuse the shadow becomes.

`color`

``object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)``

The shadow color value.

`alpha`

`number`

The alpha of the shadow's color, from 0.0 to 1.0.

`rotateWithShape`

`boolean`

Whether the shadow should rotate with the shape. This property is read-only.

`propertyState`

``enum (`[PropertyState](/slides/api/reference/rest/v1/presentations.pages/other#Page.PropertyState)`)``

The shadow property state.

Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.

### Type

The shadow types.

 

Enums

`SHADOW_TYPE_UNSPECIFIED`

Unspecified shadow type.

`OUTER`

Outer shadow.

### RectanglePosition

Defines reference positions in a rectangle.

 

Enums

`RECTANGLE_POSITION_UNSPECIFIED`

Unspecified.

`TOP_LEFT`

Top left.

`TOP_CENTER`

Top center.

`TOP_RIGHT`

Top right.

`LEFT_CENTER`

Left center.

`CENTER`

Center.

`RIGHT_CENTER`

Right center.

`BOTTOM_LEFT`

Bottom left.

`BOTTOM_CENTER`

Bottom center.

`BOTTOM_RIGHT`

Bottom right.

### ContentAlignment

The types of content alignment.

Derived from a subset of the values of the "ST\_TextAnchoringType" simple type in section 20.1.10.59 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`CONTENT_ALIGNMENT_UNSPECIFIED`

An unspecified content alignment. The content alignment is inherited from the parent if it exists.

`CONTENT_ALIGNMENT_UNSUPPORTED`

An unsupported content alignment.

`TOP`

An alignment that aligns the content to the top of the content holder. Corresponds to ECMA-376 ST\_TextAnchoringType 't'.

`MIDDLE`

An alignment that aligns the content to the middle of the content holder. Corresponds to ECMA-376 ST\_TextAnchoringType 'ctr'.

`BOTTOM`

An alignment that aligns the content to the bottom of the content holder. Corresponds to ECMA-376 ST\_TextAnchoringType 'b'.

### Placeholder

The placeholder information that uniquely identifies a placeholder shape.

JSON representation

{
  "type": enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/other#Page.Type_3)`),
  "index": integer,
  "parentObjectId": string
}

 

Fields

`type`

``enum (`[Type](/slides/api/reference/rest/v1/presentations.pages/other#Page.Type_3)`)``

The type of the placeholder.

`index`

`integer`

The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.

`parentObjectId`

`string`

The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.

### Type

The type of a placeholder shape.

Many of these placeholder types correspond to placeholder ids from the ECMA-376 standard. More information on those shapes can be found in the description of the "ST\_PlaceholderType" type in section 19.7.10 of "Office Open XML File Formats - Fundamentals and Markup Language Reference", part 1 of [ECMA-376 4th edition](http://www.ecma-international.org/publications/standards/Ecma-376.htm).

 

Enums

`NONE`

Default value, signifies it is not a placeholder.

`BODY`

Body text.

`CHART`

Chart or graph.

`CLIP_ART`

Clip art image.

`CENTERED_TITLE`

Title centered.

`DIAGRAM`

Diagram.

`DATE_AND_TIME`

Date and time.

`FOOTER`

Footer text.

`HEADER`

Header text.

`MEDIA`

Multimedia.

`OBJECT`

Any content type.

`PICTURE`

Picture.

`SLIDE_NUMBER`

Number of a slide.

`SUBTITLE`

Subtitle.

`TABLE`

Table.

`TITLE`

Slide title.

`SLIDE_IMAGE`

Slide image.

### ImageProperties

The properties of the `[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`.

JSON representation

{
  "cropProperties": {
    object (`[CropProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.CropProperties)`)
  },
  "transparency": number,
  "brightness": number,
  "contrast": number,
  "recolor": {
    object (`[Recolor](/slides/api/reference/rest/v1/presentations.pages/other#Page.Recolor)`)
  },
  "outline": {
    object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)
  },
  "shadow": {
    object (`[Shadow](/slides/api/reference/rest/v1/presentations.pages/other#Page.Shadow)`)
  },
  "link": {
    object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)
  }
}

 

Fields

`cropProperties`

``object (`[CropProperties](/slides/api/reference/rest/v1/presentations.pages/other#Page.CropProperties)`)``

The crop properties of the image. If not set, the image is not cropped. This property is read-only.

`transparency`

`number`

The transparency effect of the image. The value should be in the interval \[0.0, 1.0\], where 0 means no effect and 1 means completely transparent. This property is read-only.

`brightness`

`number`

The brightness effect of the image. The value should be in the interval \[-1.0, 1.0\], where 0 means no effect. This property is read-only.

`contrast`

`number`

The contrast effect of the image. The value should be in the interval \[-1.0, 1.0\], where 0 means no effect. This property is read-only.

`recolor`

``object (`[Recolor](/slides/api/reference/rest/v1/presentations.pages/other#Page.Recolor)`)``

The recolor effect of the image. If not set, the image is not recolored. This property is read-only.

`outline`

``object (`[Outline](/slides/api/reference/rest/v1/presentations.pages/other#Page.Outline)`)``

The outline of the image. If not set, the image has no outline.

`shadow`

``object (`[Shadow](/slides/api/reference/rest/v1/presentations.pages/other#Page.Shadow)`)``

The shadow of the image. If not set, the image has no shadow. This property is read-only.

`link`

``object (`[Link](/slides/api/reference/rest/v1/presentations.pages/other#Page.Link)`)``

The hyperlink destination of the image. If unset, there is no link.

### CropProperties

The crop properties of an object enclosed in a container. For example, an `[Image](/slides/api/reference/rest/v1/presentations.pages/images#Page.Image)`.

The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object's original bounding rectangle towards inside, relative to the object's original dimensions.

*   If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object's original bounding rectangle.
*   If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object's original bounding rectangle.
*   If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally.
*   If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically.
*   If all offsets and rotation angle is 0, the object is not cropped.

After cropping, the content in the crop rectangle will be stretched to fit its container.

JSON representation

{
  "leftOffset": number,
  "rightOffset": number,
  "topOffset": number,
  "bottomOffset": number,
  "angle": number
}

 

Fields

`leftOffset`

`number`

The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.

`rightOffset`

`number`

The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.

`topOffset`

`number`

The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.

`bottomOffset`

`number`

The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.

`angle`

`number`

The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.

### Recolor

A recolor effect applied on an image.

JSON representation

{
  "recolorStops": \[
    {
      object (`[ColorStop](/slides/api/reference/rest/v1/presentations.pages/other#Page.ColorStop)`)
    }
  \],
  "name": enum (`[Name](/slides/api/reference/rest/v1/presentations.pages/other#Page.Name)`)
}

 

Fields

`recolorStops[]`

``object (`[ColorStop](/slides/api/reference/rest/v1/presentations.pages/other#Page.ColorStop)`)``

The recolor effect is represented by a gradient, which is a list of color stops.

The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.

`name`

``enum (`[Name](/slides/api/reference/rest/v1/presentations.pages/other#Page.Name)`)``

The name of the recolor effect.

The name is determined from the `recolorStops` by matching the gradient against the colors in the page's current `[color scheme](/slides/api/reference/rest/v1/presentations.pages#Page.PageProperties.FIELDS.color_scheme)`. This property is read-only.

### ColorStop

A color and position in a gradient band.

JSON representation

{
  "color": {
    object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)
  },
  "alpha": number,
  "position": number
}

 

Fields

`color`

``object (`[OpaqueColor](/slides/api/reference/rest/v1/presentations.pages/other#Page.OpaqueColor)`)``

The color of the gradient stop.

`alpha`

`number`

The alpha value of this color in the gradient band. Defaults to 1.0, fully opaque.

`position`

`number`

The relative position of the color stop in the gradient band measured in percentage. The value should be in the interval \[0.0, 1.0\].

### Name

The recolor effect names.

 

Enums

`NONE`

No recolor effect. The default value.

`LIGHT1`

A recolor effect that lightens the image using the page's first available color from its color scheme.

`LIGHT2`

A recolor effect that lightens the image using the page's second available color from its color scheme.

`LIGHT3`

A recolor effect that lightens the image using the page's third available color from its color scheme.

`LIGHT4`

A recolor effect that lightens the image using the page's forth available color from its color scheme.

`LIGHT5`

A recolor effect that lightens the image using the page's fifth available color from its color scheme.

`LIGHT6`

A recolor effect that lightens the image using the page's sixth available color from its color scheme.

`LIGHT7`

A recolor effect that lightens the image using the page's seventh available color from its color scheme.

`LIGHT8`

A recolor effect that lightens the image using the page's eighth available color from its color scheme.

`LIGHT9`

A recolor effect that lightens the image using the page's ninth available color from its color scheme.

`LIGHT10`

A recolor effect that lightens the image using the page's tenth available color from its color scheme.

`DARK1`

A recolor effect that darkens the image using the page's first available color from its color scheme.

`DARK2`

A recolor effect that darkens the image using the page's second available color from its color scheme.

`DARK3`

A recolor effect that darkens the image using the page's third available color from its color scheme.

`DARK4`

A recolor effect that darkens the image using the page's fourth available color from its color scheme.

`DARK5`

A recolor effect that darkens the image using the page's fifth available color from its color scheme.

`DARK6`

A recolor effect that darkens the image using the page's sixth available color from its color scheme.

`DARK7`

A recolor effect that darkens the image using the page's seventh available color from its color scheme.

`DARK8`

A recolor effect that darkens the image using the page's eighth available color from its color scheme.

`DARK9`

A recolor effect that darkens the image using the page's ninth available color from its color scheme.

`DARK10`

A recolor effect that darkens the image using the page's tenth available color from its color scheme.

`GRAYSCALE`

A recolor effect that recolors the image to grayscale.

`NEGATIVE`

A recolor effect that recolors the image to negative grayscale.

`SEPIA`

A recolor effect that recolors the image using the sepia color.

`CUSTOM`

Custom recolor effect. Refer to `recolorStops` for the concrete gradient.


TYPES
~~~~~~~~~

Dimension
=========


A magnitude in a single direction in the specified units.

JSON representation

{
  "magnitude": number,
  "unit": enum (`[Unit](/slides/api/reference/rest/v1/Unit)`)
}

 

Fields

`magnitude`

`number`

The magnitude.

`unit`

``enum (`[Unit](/slides/api/reference/rest/v1/Unit)`)``

The units for magnitude.


Size
====

A width and height.

JSON representation

{
  "width": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  },
  "height": {
    object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)
  }
}

 

Fields

`width`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The width of the object.

`height`

``object (`[Dimension](/slides/api/reference/rest/v1/Dimension)`)``

The height of the object.



Unit
====

Units of measurement.


Enums

`UNIT_UNSPECIFIED`

The units are unknown.

`EMU`

An English Metric Unit (EMU) is defined as 1/360,000 of a centimeter and thus there are 914,400 EMUs per inch, and 12,700 EMUs per point.

`PT`

A point, 1/72 of an inch.
